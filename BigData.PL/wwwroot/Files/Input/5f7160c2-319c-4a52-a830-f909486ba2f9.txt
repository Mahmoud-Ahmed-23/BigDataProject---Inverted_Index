Method of forming inferences
Not to be confused with Backward chaining  applied behavior analysis  or Back chaining 
Backward chaining  or backward reasoning  is an inference method described colloquially as working backward from the goal  It is used in automated theorem provers  inference engines  proof assistants  and other artificial intelligence applications            
In game theory  researchers apply it to  simpler  subgames to find a solution to the game  in a process called backward induction  In chess  it is called retrograde analysis  and it is used to generate table bases for chess endgames for computer chess 
Backward chaining is implemented in logic programming by SLD resolution  Both rules are based on the modus ponens inference rule  It is one of the two most commonly used methods of reasoning with inference rules and logical implications   the other is forward chaining  Backward chaining systems usually employ a depth first search strategy  e g  Prolog            


Usage edit 
Backward chaining starts with a list of goals  or a hypothesis  and works backwards from the consequent to the antecedent to see if any data supports any of these consequents             An inference engine using backward chaining would search the inference rules until it finds one with a consequent  Then clause  that matches a desired goal  If the antecedent  If clause  of that rule is not known to be true  then it is added to the list of goals  for one s goal to be confirmed one must also provide data that confirms this new rule  
For example  suppose a new pet  Fritz  is delivered in an opaque box along with two facts about Fritz 

Fritz croaks
Fritz eats flies
The goal is to decide whether Fritz is green  based on a rule base containing the following four rules 

An example of backward chaining
If X croaks and X eats flies   Then X is a frog
If X chirps and X sings   Then X is a canary
If X is a frog   Then X is green
If X is a canary   Then X is yellow
With backward reasoning  an inference engine can determine whether Fritz is green in four steps   To start  the query is phrased as a goal assertion that is to be proven   Fritz is green  
   Fritz is substituted for X in rule    to see if its consequent matches the goal  so rule    becomes 

 If Fritz is a frog   Then Fritz is green

Since the consequent matches the goal   Fritz is green    the rules engine now needs to see if the antecedent   Fritz is a frog   can be proven   The antecedent  therefore  becomes the new goal 

 Fritz is a frog

   Again substituting Fritz for X  rule    becomes 

 If Fritz croaks and Fritz eats flies   Then Fritz is a frog

Since the consequent matches the current goal   Fritz is a frog    the inference engine now needs to see if the antecedent   Fritz croaks and eats flies   can be proven   The antecedent  therefore  becomes the new goal 

 Fritz croaks and Fritz eats flies

   Since this goal is a conjunction of two statements  the inference engine breaks it into two sub goals  both of which must be proven 

 Fritz croaks
 Fritz eats flies

   To prove both of these sub goals  the inference engine sees that both of these sub goals were given as initial facts   Therefore  the conjunction is true 

 Fritz croaks and Fritz eats flies

therefore the antecedent of rule    is true and the consequent must be true 

 Fritz is a frog

therefore the antecedent of rule    is true and the consequent must be true 

 Fritz is green

This derivation  therefore  allows the inference engine to prove that Fritz is green   Rules    and    were not used 
Note that the goals always match the affirmed versions of the consequents of implications  and not the negated versions as in modus tollens  and even then  their antecedents are then considered as the new goals  and not the conclusions as in affirming the consequent   which ultimately must match known facts  usually defined as consequents whose antecedents are always true   thus  the inference rule used is modus ponens 
Because the list of goals determines which rules are selected and used  this method is called goal driven  in contrast to data driven forward chaining inference  The backward chaining approach is often employed by expert systems 
Programming languages such as Prolog  Knowledge Machine and ECLiPSe support backward chaining within their inference engines            

See also edit 
Backtracking
Backward induction
Forward chaining
Opportunistic reasoning
References edit 

  Feigenbaum  Edward         The Rise of the Expert Company  Times Books  p            ISBN                    

  Michel Chein  Marie Laure Mugnier         Graph based knowledge representation  computational foundations of conceptual graphs  Springer  p            ISBN                        

  
Definition of backward chaining as a depth first search method 
Russell  amp  Norvig       p          

  
Languages that support backward chaining 
Russell  amp  Norvig       p          


Sources edit 
Russell  Stuart  Norvig  Peter         Artificial Intelligence  A Modern Approach  Prentice Hall  ISBN                        
External links edit 
Backward chaining example
vteKnowledge representation and reasoning
Backward chaining
Case based reasoning
Commonsense reasoning
Forward chaining
Model based reasoning
Inference engines
Proof assistants
Knowledge engineering
Expert systems
CLIPS
Connectionist expert systems
Expert systems for mortgages
Legal expert systems
Reasoning systems
Theorem provers
Constraint solvers
Deductive classifiers
Logic programs
Procedural reasoning systems
Rule engines
Ontology languages
Attempto Controlled English
CycL
F logic
FO   
Knowledge Interchange Format
Web Ontology Language
Theorem provers
CARINE
E
Nqthm
Otter
Paradox
Prover 
SPASS
TPS
Z 
Constraint satisfaction
Constraint programming
Constraint logic programming
Local consistency
SMT solvers
Automated planning
Motion planning
Multi agent planning
Partial order planning
Preference based planning
Reactive planning
State space planning






Retrieved from  https   en wikipedia org w index php title Backward chaining amp oldid