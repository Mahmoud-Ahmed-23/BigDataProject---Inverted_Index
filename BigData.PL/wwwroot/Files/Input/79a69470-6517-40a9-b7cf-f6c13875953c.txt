Mathematical model of computation
 State machine  redirects here  For infinite state machines  see Transition system  For fault tolerance methodology  see State machine replication 
 SFSM  redirects here  For the Italian railway company  see Circumvesuviana 
 Finite automata  redirects here  For the electro industrial group  see Finite Automata  band  



Classes of automata  Clicking on each layer gets an article on that subject 
A finite state machine  FSM  or finite state automaton  FSA  plural  automata   finite automaton  or simply a state machine  is a mathematical model of computation  It is an abstract machine that can be in exactly one of a finite number of states at any given time  The FSM can change from one state to another in response to some inputs  the change from one state to another is called a transition             An FSM is defined by a list of its states  its initial state  and the inputs that trigger each transition  Finite state machines are of two types deterministic finite state machines and non deterministic finite state machines             For any non deterministic finite state machine  an equivalent deterministic one can be constructed 
The behavior of state machines can be observed in many devices in modern society that perform a predetermined sequence of actions depending on a sequence of events with which they are presented  Simple examples are  vending machines  which dispense products when the proper combination of coins is deposited  elevators  whose sequence of stops is determined by the floors requested by riders  traffic lights  which change sequence when cars are waiting  combination locks  which require the input of a sequence of numbers in the proper order 
The finite state machine has less computational power than some other models of computation such as the Turing machine             The computational power distinction means there are computational tasks that a Turing machine can do but an FSM cannot  This is because an FSM s memory is limited by the number of states it has  A finite state machine has the same computational power as a Turing machine that is restricted such that its head may only perform  read  operations  and always has to move from left to right  FSMs are studied in the more general field of automata theory 


Example  coin operated turnstile edit 
State diagram for a turnstile
A turnstile
An example of a simple mechanism that can be modeled by a state machine is a turnstile                        A turnstile  used to control access to subways and amusement park rides  is a gate with three rotating arms at waist height  one across the entryway  Initially the arms are locked  blocking the entry  preventing patrons from passing through  Depositing a coin or token in a slot on the turnstile unlocks the arms  allowing a single customer to push through  After the customer passes through  the arms are locked again until another coin is inserted 
Considered as a state machine  the turnstile has two possible states  Locked and Unlocked             There are two possible inputs that affect its state  putting a coin in the slot  coin  and pushing the arm  push   In the locked state  pushing on the arm has no effect  no matter how many times the input push is given  it stays in the locked state  Putting a coin in   that is  giving the machine a coin input   shifts the state from Locked to Unlocked  In the unlocked state  putting additional coins in has no effect  that is  giving additional coin inputs does not change the state  A customer pushing through the arms gives a push input and resets the state to Locked 
The turnstile state machine can be represented by a state transition table  showing for each possible state  the transitions between them  based upon the inputs given to the machine  and the outputs resulting from each input 



Current State

Input

Next State

Output


Locked

coin
Unlocked
Unlocks the turnstile so that the customer can push through 


push
Locked
None


Unlocked

coin
Unlocked
None


push
Locked
When the customer has pushed through  locks the turnstile 

The turnstile state machine can also be represented by a directed graph called a state diagram  above   Each state is represented by a node  circle   Edges  arrows  show the transitions from one state to another  Each arrow is labeled with the input that triggers that transition  An input that doesn t cause a change of state  such as a coin input in the Unlocked state  is represented by a circular arrow returning to the original state  The arrow into the Locked node from the black dot indicates it is the initial state 

Concepts and terminology edit 
A state is a description of the status of a system that is waiting to execute a transition  A transition is a set of actions to be executed when a condition is fulfilled or when an event is received 
For example  when using an audio system to listen to the radio  the system is in the  radio  state   receiving a  next  stimulus results in moving to the next station  When the system is in the  CD  state  the  next  stimulus results in moving to the next track  Identical stimuli trigger different actions depending on the current state 
In some finite state machine representations  it is also possible to associate actions with a state 

an entry action  performed when entering the state  and
an exit action  performed when exiting the state 
Representations edit 
Fig    UML state chart example  a toaster oven 
Fig    SDL state machine example
Fig    Example of a simple finite state machine
For an introduction  see State diagram 
State Event table edit 
Several state transition table types are used  The most common representation is shown below  the combination of current state  e g  B  and input  e g  Y  shows the next state  e g  C   By itself  the table cannot completely describe the action  so it is common to use footnotes  Other related representations may not have this limitation  For example  an FSM definition including the full action s information is possible using state tables  see also virtual finite state machine  


State transition table


       CurrentstateInput
State A
State B
State C


Input X

   
   
   


Input Y

   
State C
   


Input Z

   
   
   

UML state machines edit 
The Unified Modeling Language has a notation for describing state machines  UML state machines overcome the limitations     citation needed      of traditional finite state machines while retaining their main benefits  UML state machines introduce the new concepts of hierarchically nested states and orthogonal regions  while extending the notion of actions  UML state machines have the characteristics of both Mealy machines and Moore machines  They support actions that depend on both the state of the system and the triggering event  as in Mealy machines  as well as entry and exit actions  which are associated with states rather than transitions  as in Moore machines      citation needed     

SDL state machines edit 
The Specification and Description Language is a standard from ITU that includes graphical symbols to describe actions in the transition 

send an event
receive an event
start a timer
cancel a timer
start another concurrent state machine
decision
SDL embeds basic data types called  Abstract Data Types   an action language  and an execution semantic in order to make the finite state machine executable      citation needed     

Other state diagrams edit 
There are a large number of variants to represent an FSM such as the one in figure   

Usage edit 
In addition to their use in modeling reactive systems presented here  finite state machines are significant in many different areas  including electrical engineering  linguistics  computer science  philosophy  biology  mathematics  video game programming  and logic  Finite state machines are a class of automata studied in automata theory and the theory of computation 
In computer science  finite state machines are widely used in modeling of application behavior  control theory   design of hardware digital systems  software engineering  compilers  network protocols  and computational linguistics 

Classification edit 
Finite state machines can be subdivided into acceptors  classifiers  transducers and sequencers            

Acceptors edit 
Fig     Acceptor FSM  parsing the string  nice  
Fig     Representation of an acceptor  this example shows one that determines whether a binary number has an even number of  s  where S  is an accepting state and S  is a non accepting state 
Acceptors  also called detectors or recognizers  produce binary output  indicating whether or not the received input is accepted  Each state of an acceptor is either accepting or non accepting  Once all input has been received  if the current state is an accepting state  the input is accepted  otherwise it is rejected  As a rule  input is a sequence of symbols  characters   actions are not used  The start state can also be an accepting state  in which case the acceptor accepts the empty string  The example in figure   shows an acceptor that accepts the string  nice   In this acceptor  the only accepting state is state   
A  possibly infinite  set of symbol sequences  called a formal language  is a regular language if there is some acceptor that accepts exactly that set             For example  the set of binary strings with an even number of zeroes is a regular language  cf  Fig      while the set of all strings whose length is a prime number is not            
An acceptor could also be described as defining a language that would contain every string accepted by the acceptor but none of the rejected ones  that language is accepted by the acceptor  By definition  the languages accepted by acceptors are the regular languages 
The problem of determining the language accepted by a given acceptor is an instance of the algebraic path problem itself a generalization of the shortest path problem to graphs with edges weighted by the elements of an  arbitrary  semiring                             jargon     
An example of an accepting state appears in Fig     a deterministic finite automaton  DFA  that detects whether the binary input string contains an even number of  s 
S   which is also the start state  indicates the state at which an even number of  s has been input  S  is therefore an accepting state  This acceptor will finish in an accept state  if the binary string contains an even number of  s  including any binary string containing no  s   Examples of strings accepted by this acceptor are    the empty string                                       etc 

Classifiers edit 
Classifiers are a generalization of acceptors that produce n ary output where n is strictly greater than two             

Transducers edit 
Main article  Finite state transducer
Fig    Transducer FSM  Moore model example
Fig    Transducer FSM  Mealy model example
Transducers produce output based on a given input and or a state using actions  They are used for control applications and in the field of computational linguistics 
In control applications  two types are distinguished 

Moore machine
The FSM uses only entry actions  i e   output depends only on state  The advantage of the Moore model is a simplification of the behaviour  Consider an elevator door  The state machine recognizes two commands   command open  and  command close   which trigger state changes  The entry action  E   in state  Opening  starts a motor opening the door  the entry action in state  Closing  starts a motor in the other direction closing the door  States  Opened  and  Closed  stop the motor when fully opened or closed  They signal to the outside world  e g   to other state machines  the situation   door is open  or  door is closed  
Mealy machine
The FSM also uses input actions  i e   output depends on input and state  The use of a Mealy FSM leads often to a reduction of the number of states  The example in figure   shows a Mealy FSM implementing the same behaviour as in the Moore example  the behaviour depends on the implemented FSM execution model and will work  e g   for virtual FSM but not for event driven FSM   There are two input actions  I     start motor to close the door if command close arrives  and  start motor in the other direction to open the door if command open arrives   The  opening  and  closing  intermediate states are not shown 
Sequencers edit 
Sequencers  also called generators  are a subclass of acceptors and transducers that have a single letter input alphabet  They produce only one sequence  which can be seen as an output sequence of acceptor or transducer outputs            

Determinism edit 
A further distinction is between deterministic  DFA  and non deterministic  NFA  GNFA  automata  In a deterministic automaton  every state has exactly one transition for each possible input  In a non deterministic automaton  an input can lead to one  more than one  or no transition for a given state  The powerset construction algorithm can transform any nondeterministic automaton into a  usually more complex  deterministic automaton with identical functionality 
A finite state machine with only one state is called a  combinatorial FSM   It only allows actions upon transition into a state  This concept is useful in cases where a number of finite state machines are required to work together  and when it is convenient to consider a purely combinatorial part as a form of FSM to suit the design tools             

Alternative semantics edit 
There are other sets of semantics available to represent state machines  For example  there are tools for modeling and designing logic for embedded controllers              They combine hierarchical state machines  which usually have more than one current state   flow graphs  and truth tables into one language  resulting in a different formalism and set of semantics               These charts  like Harel s original state machines              support hierarchically nested states  orthogonal regions  state actions  and transition actions             

Mathematical model edit 
In accordance with the general classification  the following formal definitions are found 
A deterministic finite state machine or deterministic finite state acceptor is a quintuple 
  
    
      
         
          x a  
         
        S
         
        
          s
          
             
          
        
         
          x b  
         
        F
         
      
    
      displaystyle   Sigma  S s      delta  F  
  
  where 


  
    
      
          x a  
      
    
      displaystyle  Sigma  
  
 is the input alphabet  a finite non empty set of symbols  

  
    
      
        S
      
    
      displaystyle S 
  
 is a finite non empty set of states 

  
    
      
        
          s
          
             
          
        
      
    
      displaystyle s     
  
 is an initial state  an element of 
  
    
      
        S
      
    
      displaystyle S 
  
 

  
    
      
          x b  
      
    
      displaystyle  delta  
  
 is the state transition function  
  
    
      
          x b  
         
        S
          xd  
          x a  
          x     
        S
      
    
      displaystyle  delta  S times  Sigma  rightarrow S 
  
  in a nondeterministic finite automaton it would be 
  
    
      
          x b  
         
        S
          xd  
          x a  
          x     
        
          
            P
          
        
         
        S
         
      
    
      displaystyle  delta  S times  Sigma  rightarrow   mathcal  P   S  
  
  i e  
  
    
      
          x b  
      
    
      displaystyle  delta  
  
 would return a set of states  

  
    
      
        F
      
    
      displaystyle F 
  
 is the set of final states  a  possibly empty  subset of 
  
    
      
        S
      
    
      displaystyle S 
  
 
For both deterministic and non deterministic FSMs  it is conventional to allow 
  
    
      
          x b  
      
    
      displaystyle  delta  
  
 to be a partial function  i e  
  
    
      
          x b  
         
        s
         
        x
         
      
    
      displaystyle  delta  s x  
  
 does not have to be defined for every combination of 
  
    
      
        s
          x     
        S
      
    
      displaystyle s in S 
  
 and 
  
    
      
        x
          x     
          x a  
      
    
      displaystyle x in  Sigma  
  
  If an FSM 
  
    
      
        M
      
    
      displaystyle M 
  
 is in a state 
  
    
      
        s
      
    
      displaystyle s 
  
  the next symbol is 
  
    
      
        x
      
    
      displaystyle x 
  
 and 
  
    
      
          x b  
         
        s
         
        x
         
      
    
      displaystyle  delta  s x  
  
 is not defined  then 
  
    
      
        M
      
    
      displaystyle M 
  
 can announce an error  i e  reject the input   This is useful in definitions of general state machines  but less useful when transforming the machine  Some algorithms in their default form may require total functions 
A finite state machine has the same computational power as a Turing machine that is restricted such that its head may only perform  read  operations  and always has to move from left to right  That is  each formal language accepted by a finite state machine is accepted by such a kind of restricted Turing machine  and vice versa             
A finite state transducer is a sextuple 
  
    
      
         
          x a  
         
          x    
         
        S
         
        
          s
          
             
          
        
         
          x b  
         
          x c  
         
      
    
      displaystyle   Sigma   Gamma  S s      delta   omega   
  
  where 


  
    
      
          x a  
      
    
      displaystyle  Sigma  
  
 is the input alphabet  a finite non empty set of symbols  

  
    
      
          x    
      
    
      displaystyle  Gamma  
  
 is the output alphabet  a finite non empty set of symbols  

  
    
      
        S
      
    
      displaystyle S 
  
 is a finite non empty set of states 

  
    
      
        
          s
          
             
          
        
      
    
      displaystyle s     
  
 is the initial state  an element of 
  
    
      
        S
      
    
      displaystyle S 
  
 

  
    
      
          x b  
      
    
      displaystyle  delta  
  
 is the state transition function  
  
    
      
          x b  
         
        S
          xd  
          x a  
          x     
        S
      
    
      displaystyle  delta  S times  Sigma  rightarrow S 
  
 

  
    
      
          x c  
      
    
      displaystyle  omega  
  
 is the output function 
If the output function depends on the state and input symbol  
  
    
      
          x c  
         
        S
          xd  
          x a  
          x     
          x    
      
    
      displaystyle  omega  S times  Sigma  rightarrow  Gamma  
  
  that definition corresponds to the Mealy model  and can be modelled as a Mealy machine  If the output function depends only on the state  
  
    
      
          x c  
         
        S
          x     
          x    
      
    
      displaystyle  omega  S rightarrow  Gamma  
  
  that definition corresponds to the Moore model  and can be modelled as a Moore machine  A finite state machine with no output function at all is known as a semiautomaton or transition system 
If we disregard the first output symbol of a Moore machine  
  
    
      
          x c  
         
        
          s
          
             
          
        
         
      
    
      displaystyle  omega  s      
  
  then it can be readily converted to an output equivalent Mealy machine by setting the output function of every Mealy transition  i e  labeling every edge  with the output symbol given of the destination Moore state  The converse transformation is less straightforward because a Mealy machine state may have different output labels on its incoming transitions  edges   Every such state needs to be split in multiple Moore machine states  one for every incident output symbol             

Optimization edit 
Main article  DFA minimization
Optimizing an FSM means finding a machine with the minimum number of states that performs the same function  The fastest known algorithm doing this is the Hopcroft minimization algorithm                          Other techniques include using an implication table  or the Moore reduction procedure              Additionally  acyclic FSAs can be minimized in linear time             

Implementation edit 
Hardware applications edit 
Fig    The circuit diagram for a   bit TTL counter  a type of state machine
In a digital circuit  an FSM may be built using a programmable logic device  a programmable logic controller  logic gates and flip flops or relays  More specifically  a hardware implementation requires a register to store state variables  a block of combinational logic that determines the state transition  and a second block of combinational logic that determines the output of an FSM  One of the classic hardware implementations is the Richards controller 
In a Medvedev machine  the output is directly connected to the state flip flops minimizing the time delay between flip flops and output                         
Through state encoding for low power state machines may be optimized to minimize power consumption 

Software applications edit 
The following concepts are commonly used to build software applications with finite state machines 

Automata based programming
Event driven finite state machine
Virtual finite state machine
State design pattern
Finite state machines and compilers edit 
Finite automata are often used in the frontend of programming language compilers  Such a frontend may comprise several finite state machines that implement a lexical analyzer and a parser 
Starting from a sequence of characters  the lexical analyzer builds a sequence of language tokens  such as reserved words  literals  and identifiers  from which the parser builds a syntax tree  The lexical analyzer and the parser handle the regular and context free parts of the programming language s grammar             

See also edit 

Abstract state machines
Alternating finite automaton
Communicating finite state machine
Control system
Control table
Decision tables
DEVS
Hidden Markov model
Petri net
Pushdown automaton
Quantum finite automaton
SCXML
Semiautomaton
Semigroup action
Sequential logic
State diagram
Synchronizing word
Transformation semigroup
Transition system
Tree automaton
Turing machine
UML state machine

References edit 


  Wang  Jiacun         Formal Methods in Computer Science  CRC Press  p           ISBN                        

   Finite State Machines   Brilliant Math  amp  Science Wiki   brilliant org  Retrieved            

  Belzer  Jack  Holzman  Albert George  Kent  Allen         Encyclopedia of Computer Science and Technology  Vol           USA  CRC Press  p           ISBN                        

  a b Koshy  Thomas         Discrete Mathematics With Applications  Academic Press  p            ISBN                        

  Wright  David R           Finite State Machines   PDF   CSC    Class Notes  David R  Wright website  N  Carolina State Univ  Archived from the original  PDF  on             Retrieved            

  a b Keller  Robert M           Classifiers  Acceptors  Transducers  and Sequencers   PDF   Computer Science  Abstraction to Implementation  PDF   Harvey Mudd College  p           

  Hopcroft  amp  Ullman       pp          

  Hopcroft  Motwani  amp  Ullman       pp             

  Pouly  Marc  Kohlas  J rg         Generic Inference  A Unifying Theory for Automated Reasoning  John Wiley  amp  Sons  Chapter    Valuation Algebras for Path Problems  p      in particular  ISBN                        

  Jacek Jonczy  Jun         Algebraic path problems   PDF   Archived from the original  PDF  on             Retrieved              p    

  Felkin  M          Guillet  Fabrice  Hamilton  Howard J   eds    Quality Measures in Data Mining   Studies in Computational Intelligence  Vol           Springer  Berlin  Heidelberg  pp                doi                               ISBN                        

  Brutscheck  M   Berger  S   Franke  M   Schwarzbacher  A   Becker  S   Structural Division Procedure for Efficient IC Analysis  IET Irish
Signals and Systems Conference   ISSC        pp        Galway  Ireland        June          

   Tiwari  A          Formal Semantics and Analysis Methods for Simulink Stateflow Models   PDF   sri com  Retrieved            

  Hamon  G          A Denotational Semantics for Stateflow  International Conference on Embedded Software  Jersey City  NJ  ACM  pp                CiteSeerX                     

   Harel  D          A Visual Formalism for Complex Systems  Science of Computer Programming            PDF   Archived from the original  PDF  on             Retrieved            

   Alur  R   Kanade  A   Ramesh  S    amp  Shashidhar  K  C          Symbolic analysis for improving simulation coverage of Simulink Stateflow models  International Conference on Embedded Software  pp          Atlanta  GA  ACM   PDF   Archived from the original  PDF  on            

  Black  Paul E     May         Finite State Machine   Dictionary of Algorithms and Data Structures  U S  National Institute of Standards and Technology  Archived from the original on    October       Retrieved   November      

  Anderson  James Andrew  Head  Thomas J          Automata theory with modern applications  Cambridge University Press  pp                ISBN                        

  Hopcroft  John E          An n log n algorithm for minimizing states in a finite automaton  PDF   Technical Report   Vol       CS TR         Stanford Univ      permanent dead link     

  Almeida  Marco  Moreira  Nelma  Reis  Rogerio         On the performance of automata minimization algorithms  PDF   Technical Report   Vol       DCC          Porto Univ  Archived from the original  PDF  on    January       Retrieved    June      

  Edward F  Moore         C E  Shannon and J  McCarthy  ed     Gedanken Experiments on Sequential Machines   Annals of Mathematics Studies      Princeton University Press           Here  Theorem    p     

  Revuz  D           Minimization of Acyclic automata in Linear Time   Theoretical Computer Science               doi                              

  Kaeslin  Hubert          Mealy  Moore  Medvedev type and combinatorial output bits   Digital Integrated Circuit Design  From VLSI Architectures to CMOS Fabrication  Cambridge University Press  p            ISBN                        

  Slides Archived    January      at the Wayback Machine  Synchronous Finite State Machines  Design and Behaviour  University of Applied Sciences Hamburg  p   

  Aho  Alfred V   Sethi  Ravi  Ullman  Jeffrey D          Compilers  Principles  Techniques  and Tools   st      ed    Addison Wesley  ISBN                        


Sources edit 
Hopcroft  John E   Ullman  Jeffrey D          Introduction to Automata Theory  Languages  and Computation   st      ed    Addison Wesley  ISBN                  X   accessible to patrons with print disabilities 
Hopcroft  John E   Motwani  Rajeev  Ullman  Jeffrey D                 Introduction to Automata Theory  Languages  and Computation   rd      ed    Addison Wesley  ISBN                    
Further reading edit 
General edit 
Sakarovitch  Jacques         Elements of automata theory  Translated from the French by Reuben Thomas  Cambridge University Press  ISBN                         Zbl                 
Wagner  F    Modeling Software with Finite State Machines  A Practical Approach   Auerbach Publications        ISBN                    
ITU T  Recommendation Z     Specification and Description Language  SDL 
Samek  M   Practical Statecharts in C C    CMP Books        ISBN                    
Samek  M   Practical UML Statecharts in C C     nd Edition  Newnes        ISBN                    
Gardner  T   Advanced State Management Archived            at the Wayback Machine      
Cassandras  C   Lafortune  S    Introduction to Discrete Event Systems   Kluwer        ISBN                    
Timothy Kam  Synthesis of Finite State Machines  Functional Optimization  Kluwer Academic Publishers  Boston       ISBN                   
Tiziano Villa  Synthesis of Finite State Machines  Logic Optimization  Kluwer Academic Publishers  Boston       ISBN                   
Carroll  J   Long  D   Theory of Finite Automata with an Introduction to Formal Languages  Prentice Hall  Englewood Cliffs       
Kohavi  Z   Switching and Finite Automata Theory  McGraw Hill       
Gill  A   Introduction to the Theory of Finite state Machines  McGraw Hill       
Ginsburg  S   An Introduction to Mathematical Machine Theory  Addison Wesley       
Finite state machines  automata theory  in theoretical computer science edit 
Arbib  Michael A          Theories of Abstract Automata   st      ed    Englewood Cliffs  N J   Prentice Hall  Inc  ISBN                        
Bobrow  Leonard S   Arbib  Michael A          Discrete Mathematics  Applied Algebra for Computer and Information Science   st      ed    Philadelphia  W  B  Saunders Company  Inc  ISBN                        
Booth  Taylor L          Sequential Machines and Automata Theory   st      ed    New York  John Wiley and Sons  Inc  Library of Congress Card Catalog Number          
Boolos  George  Jeffrey  Richard                Computability and Logic   rd      ed    Cambridge  England  Cambridge University Press  ISBN                        
Brookshear  J  Glenn         Theory of Computation  Formal Languages  Automata  and Complexity  Redwood City  California  Benjamin Cummings Publish Company  Inc  ISBN                        
Davis  Martin  Sigal  Ron  Weyuker  Elaine J          Computability  Complexity  and Languages and Logic  Fundamentals of Theoretical Computer Science   nd      ed    San Diego  Academic Press  Harcourt  Brace  amp  Company  ISBN                        
Hopkin  David  Moss  Barbara         Automata  New York  Elsevier North Holland  ISBN                        
Kozen  Dexter C          Automata and Computability   st      ed    New York  Springer Verlag  ISBN                        
Lewis  Harry R   Papadimitriou  Christos H          Elements of the Theory of Computation   nd      ed    Upper Saddle River  New Jersey  Prentice Hall  ISBN                        
Linz  Peter         Formal Languages and Automata   th      ed    Sudbury  MA  Jones and Bartlett  ISBN                        
Minsky  Marvin         Computation  Finite and Infinite Machines   st      ed    New Jersey  Prentice Hall 
Papadimitriou  Christos         Computational Complexity   st      ed    Addison Wesley  ISBN                        
Pippenger  Nicholas         Theories of Computability   st      ed    Cambridge  England  Cambridge University Press  ISBN                        
Rodger  Susan  Finley  Thomas         JFLAP  An Interactive Formal Languages and Automata Package   st      ed    Sudbury  MA  Jones and Bartlett  ISBN                        
Sipser  Michael         Introduction to the Theory of Computation   nd      ed    Boston Mass  Thomson Course Technology  ISBN                        
Wood  Derick         Theory of Computation   st      ed    New York  Harper  amp  Row  Publishers  Inc  ISBN                        
Abstract state machines in theoretical computer science edit 
Gurevich  Yuri  July         Sequential Abstract State Machines Capture Sequential Algorithms   PDF   ACM Transactions on Computational Logic                 CiteSeerX                       doi                        S CID              
Machine learning using finite state algorithms edit 
Mitchell  Tom M          Machine Learning   st      ed    New York  WCB McGraw Hill Corporation  ISBN                        
Hardware engineering  state minimization and synthesis of sequential circuits edit 
Booth  Taylor L          Sequential Machines and Automata Theory   st      ed    New York  John Wiley and Sons  Inc  Library of Congress Card Catalog Number          
Booth  Taylor L          Digital Networks and Computer Systems   st      ed    New York  John Wiley and Sons  Inc  ISBN                        
McCluskey  E  J          Introduction to the Theory of Switching Circuits   st      ed    New York  McGraw Hill Book Company  Inc  Library of Congress Card Catalog Number          
Hill  Fredrick J   Peterson  Gerald R          Introduction to the Theory of Switching Circuits   st      ed    New York  McGraw Hill Book Company  Library of Congress Card Catalog Number          
Finite Markov chain processes edit 
 We may think of a Markov chain as a process that moves successively through a set of states s   s      sr    if it is in state si it moves on to the next stop to state sj with probability pij  These probabilities can be exhibited in the form of a transition matrix   Kemeny         p      
Finite Markov chain processes are also known as subshifts of finite type 

Booth  Taylor L          Sequential Machines and Automata Theory   st      ed    New York  John Wiley and Sons  Inc  Library of Congress Card Catalog Number          
Kemeny  John G   Mirkil  Hazleton  Snell  J  Laurie  Thompson  Gerald L          Finite Mathematical Structures   st      ed    Englewood Cliffs  N J   Prentice Hall  Inc  Library of Congress Card Catalog Number           Chapter    Finite Markov Chains  
External links edit 
Modeling a Simple AI behavior using a Finite State Machine Example of usage in Video Games
Free On Line Dictionary of Computing description of Finite State Machines
NIST Dictionary of Algorithms and Data Structures description of Finite State Machines
A brief overview of state machine types  comparing theoretical aspects of Mealy  Moore  Harel  amp  UML state machines 
vteAutomata theory  formal languages and formal grammarsChomsky hierarchyGrammarsLanguagesAbstract machines
Type  
 
Type  
 
 
 
 
 
Type  
 
 
Type  
 
 

Unrestricted
 no common name 
Context sensitive
Positive range concatenation
Indexed
 
Linear context free rewriting systems
Tree adjoining
Context free
Deterministic context free
Visibly pushdown
Regular
 
Non recursive

Recursively enumerable
Decidable
Context sensitive
Positive range concatenation 
Indexed 
 
Linear context free rewriting language
Tree adjoining
Context free
Deterministic context free
Visibly pushdown
Regular
Star free
Finite

Turing machine
Decider
Linear bounded
PTIME Turing Machine
Nested stack
Thread automaton
restricted Tree stack automaton
Embedded pushdown
Nondeterministic pushdown
Deterministic pushdown
Visibly pushdown
Finite
Counter free  with aperiodic finite monoid 
Acyclic finite
Each category of languages  except those marked by a    is a proper subset of the category directly above it  Any language in each category is generated by a grammar and by an automaton in the category in the same line 
vteDigital electronicsComponents
Transistor
Resistor
Inductor
Capacitor
Printed electronics
Printed circuit board
Electronic circuit
Flip flop
Memory cell
Combinational logic
Sequential logic
Logic gate
Boolean circuit
Integrated circuit  IC 
Hybrid integrated circuit  HIC 
Mixed signal integrated circuit
Three dimensional integrated circuit   D IC 
Emitter coupled logic  ECL 
Erasable programmable logic device  EPLD 
Macrocell array
Programmable logic array  PLA 
Programmable logic device  PLD 
Programmable Array Logic  PAL 
Generic Array Logic  GAL 
Complex programmable logic device  CPLD 
Field programmable gate array  FPGA 
Field programmable object array  FPOA 
Application specific integrated circuit  ASIC 
Tensor Processing Unit  TPU 
Theory
Digital signal
Boolean algebra
Logic synthesis
Logic in computer science
Computer architecture
Digital signal
Digital signal processing
Circuit minimization
Switching circuit theory
Gate equivalent
Design
Logic synthesis
Place and route
Placement
Routing
Transaction level modeling
Register transfer level
Hardware description language
High level synthesis
Formal equivalence checking
Synchronous logic
Asynchronous logic
Finite state machine
Hierarchical state machine
Applications
Computer hardware
Hardware acceleration
Digital audio
radio
Digital photography
Digital telephone
Digital video
cinematography
television
Electronic literature
Design issues
Metastability
Runt pulse

Authority control databases  National Czech Republic





Retrieved from  https   en wikipedia org w index php title Finite state machine amp oldid