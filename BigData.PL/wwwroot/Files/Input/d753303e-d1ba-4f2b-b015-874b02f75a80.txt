Issue in artificial intelligence and categorical algebra
In artificial intelligence  with implications for cognitive science  the frame problem describes an issue with using first order logic  to express facts about a robot in the world  Representing the state of a robot with traditional first order logic requires the use of many axioms that simply imply that things in the environment do not change arbitrarily  For example  Hayes describes a  block world  with rules about stacking blocks together  In a first order logic system  additional axioms are required to make inferences about the environment  for example  that a block cannot change position unless it is physically moved   The frame problem is the problem of finding adequate collections of axioms for a viable description of a robot environment            
John McCarthy and Patrick J  Hayes defined this problem in their      article  Some Philosophical Problems from the Standpoint of Artificial Intelligence   In this paper  and many that came after  the formal mathematical problem was a starting point for more general discussions of the difficulty of knowledge representation for artificial intelligence  Issues such as how to provide rational default assumptions and what humans consider common sense in a virtual environment            
In philosophy  the frame problem became more broadly construed in connection with the problem of limiting the beliefs that have to be updated in response to actions  In the logical context  actions are typically specified by what they change  with the implicit assumption that everything else  the frame  remains unchanged 


Description edit 
The frame problem occurs even in very simple domains  A scenario with a door  which can be open or closed  and a light  which can be on or off  is statically represented by two propositions 
  
    
      
        
          o
          p
          e
          n
        
      
    
      displaystyle  mathrm  open   
  
 and 
  
    
      
        
          o
          n
        
      
    
      displaystyle  mathrm  on   
  
  If these conditions can change  they are better represented by two predicates 
  
    
      
        
          o
          p
          e
          n
        
         
        t
         
      
    
      displaystyle  mathrm  open   t  
  
 and 
  
    
      
        
          o
          n
        
         
        t
         
      
    
      displaystyle  mathrm  on   t  
  
 that depend on time  such predicates are called fluents  A domain in which the door is closed and the light off at time    and the door opened at time    can be directly represented in logic      clarification needed      by the following formulae 


  
    
      
          xac 
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  open      
  


  
    
      
          xac 
        
          o
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  on      
  


  
    
      
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  mathrm  open      
  

The first two formulae represent the initial situation  the third formula represents the effect of executing the action of opening the door at time    If such an action had preconditions  such as the door being unlocked  it would have been represented by 
  
    
      
          xac 
        
          l
          o
          c
          k
          e
          d
        
         
         
         
        
          x  f  
        
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  locked      implies  mathrm  open      
  
  In practice  one would have a predicate 
  
    
      
        
          e
          x
          e
          c
          u
          t
          e
          o
          p
          e
          n
        
         
        t
         
      
    
      displaystyle  mathrm  executeopen   t  
  
 for specifying when an action is executed and a rule 
  
    
      
          x     
        t
         
        
          e
          x
          e
          c
          u
          t
          e
          o
          p
          e
          n
        
         
        t
         
        
          x  f  
        
        
          o
          p
          e
          n
        
         
        t
         
         
         
      
    
      displaystyle  forall t  mathrm  executeopen   t  implies  mathrm  open   t    
  
 for specifying the effects of actions   The article on the situation calculus gives more details 
While the three formulae above are a direct expression in logic of what is known  they do not suffice to correctly draw consequences  While the following conditions  representing the expected situation  are consistent with the three formulae above  they are not the only ones 




  
    
      
          xac 
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  open      
  
              

  
    
      
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  mathrm  open      
  




  
    
      
          xac 
        
          o
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  on      
  


  
    
      
          xac 
        
          o
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  on      
  


Indeed  another set of conditions that is consistent with the three formulae above is 




  
    
      
          xac 
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  open      
  
              

  
    
      
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  mathrm  open      
  




  
    
      
          xac 
        
          o
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  on      
  


  
    
      
        
          o
          n
        
         
         
         
      
    
      displaystyle  mathrm  on      
  


The frame problem is that specifying only which conditions are changed by the actions does not entail that all other conditions are not changed  This problem can be solved by adding the so called  frame axioms   which explicitly specify that all conditions not affected by actions are not changed while executing that action  For example  since the action executed at time   is that of opening the door  a frame axiom would state that the status of the light does not change from time   to time   


  
    
      
        
          o
          n
        
         
         
         
        
          x  fa 
        
        
          o
          n
        
         
         
         
      
    
      displaystyle  mathrm  on      iff  mathrm  on      
  

The frame problem is that one such frame axiom is necessary for every pair of action and condition such that the action does not affect the condition      clarification needed      In other words  the problem is that of formalizing a dynamical domain without explicitly specifying the frame axioms 
The solution proposed by McCarthy to solve this problem involves assuming that a minimal amount of condition changes have occurred  this solution is formalized using the framework of circumscription  The Yale shooting problem  however  shows that this solution is not always correct  Alternative solutions were then proposed  involving predicate completion  fluent occlusion  successor state axioms  etc   they are explained below  By the end of the     s  the frame problem as defined by McCarthy and Hayes was solved     clarification needed       Even after that  however  the term  frame problem  was still used  in part to refer to the same problem but under different settings  e g   concurrent actions   and in part to refer to the general problem of representing and reasoning with dynamical domains 

Solutions edit 
The following solutions depict how the frame problem is solved in various formalisms  The formalisms themselves are not presented in full  what is presented are simplified versions that are sufficient to explain the full solution 

Fluent occlusion solution edit 
This solution was proposed by Erik Sandewall  who also defined a formal language for the specification of dynamical domains  therefore  such a domain can be first expressed in this language and then automatically translated into logic  In this article  only the expression in logic is shown  and only in the simplified language with no action names 
The rationale of this solution is to represent not only the value of conditions over time  but also whether they can be affected by the last executed action  The latter is represented by another condition  called occlusion  A condition is said to be occluded in a given time point if an action has been just executed that makes the condition true or false as an effect  Occlusion can be viewed as  permission to change   if a condition is occluded  it is relieved from obeying the constraint of inertia 
In the simplified example of the door and the light  occlusion can be formalized by two predicates 
  
    
      
        
          o
          c
          c
          l
          u
          d
          e
          o
          p
          e
          n
        
         
        t
         
      
    
      displaystyle  mathrm  occludeopen   t  
  
 and 
  
    
      
        
          o
          c
          c
          l
          u
          d
          e
          o
          n
        
         
        t
         
      
    
      displaystyle  mathrm  occludeon   t  
  
  The rationale is that a condition can change value only if the corresponding occlusion predicate is true at the next time point  In turn  the occlusion predicate is true only when an action affecting the condition is executed 


  
    
      
          xac 
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  open      
  


  
    
      
          xac 
        
          o
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  on      
  


  
    
      
        
          o
          p
          e
          n
        
         
         
         
          x     
        
          o
          c
          c
          l
          u
          d
          e
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  mathrm  open      wedge  mathrm  occludeopen      
  


  
    
      
          x     
        t
         
          xac 
        
          o
          c
          c
          l
          u
          d
          e
          o
          p
          e
          n
        
         
        t
         
        
          x  f  
        
         
        
          o
          p
          e
          n
        
         
        t
          x     
         
         
        
          x  fa 
        
        
          o
          p
          e
          n
        
         
        t
         
         
      
    
      displaystyle  forall t  neg  mathrm  occludeopen   t  implies   mathrm  open   t    iff  mathrm  open   t   
  


  
    
      
          x     
        t
         
          xac 
        
          o
          c
          c
          l
          u
          d
          e
          o
          n
        
         
        t
         
        
          x  f  
        
         
        
          o
          n
        
         
        t
          x     
         
         
        
          x  fa 
        
        
          o
          n
        
         
        t
         
         
      
    
      displaystyle  forall t  neg  mathrm  occludeon   t  implies   mathrm  on   t    iff  mathrm  on   t   
  

In general  every action making a condition true or false also makes the corresponding occlusion predicate true  In this case  
  
    
      
        
          o
          c
          c
          l
          u
          d
          e
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  mathrm  occludeopen      
  
 is true  making the antecedent of the fourth formula above false for 
  
    
      
        t
         
         
      
    
      displaystyle t   
  
  therefore  the constraint that 
  
    
      
        
          o
          p
          e
          n
        
         
        t
          x     
         
         
        
          x  fa 
        
        
          o
          p
          e
          n
        
         
        t
         
      
    
      displaystyle  mathrm  open   t    iff  mathrm  open   t  
  
 does not hold for 
  
    
      
        t
         
         
      
    
      displaystyle t   
  
  Therefore  
  
    
      
        
          o
          p
          e
          n
        
      
    
      displaystyle  mathrm  open   
  
 can change value  which is also what is enforced by the third formula 
In order for this condition to work  occlusion predicates have to be true only when they are made true as an effect of an action  This can be achieved either by circumscription or by predicate completion  It is worth noticing that occlusion does not necessarily imply a change  for example  executing the action of opening the door when it was already open  in the formalization above  makes the predicate 
  
    
      
        
          o
          c
          c
          l
          u
          d
          e
          o
          p
          e
          n
        
      
    
      displaystyle  mathrm  occludeopen   
  
 true and makes 
  
    
      
        
          o
          p
          e
          n
        
      
    
      displaystyle  mathrm  open   
  
 true  however  
  
    
      
        
          o
          p
          e
          n
        
      
    
      displaystyle  mathrm  open   
  
 has not changed value  as it was true already 

Predicate completion solution edit 
This encoding is similar to the fluent occlusion solution  but the additional predicates denote change  not permission to change  For example  
  
    
      
        
          c
          h
          a
          n
          g
          e
          o
          p
          e
          n
        
         
        t
         
      
    
      displaystyle  mathrm  changeopen   t  
  
 represents the fact that the predicate 
  
    
      
        
          o
          p
          e
          n
        
      
    
      displaystyle  mathrm  open   
  
 will change from time 
  
    
      
        t
      
    
      displaystyle t 
  
 to 
  
    
      
        t
         
         
      
    
      displaystyle t   
  
  As a result  a predicate changes if and only if the corresponding change predicate is true  An action results in a change if and only if it makes true a condition that was previously false or vice versa 


  
    
      
          xac 
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  open      
  


  
    
      
          xac 
        
          o
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  on      
  


  
    
      
          xac 
        
          o
          p
          e
          n
        
         
         
         
        
          x  f  
        
        
          c
          h
          a
          n
          g
          e
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  open      implies  mathrm  changeopen      
  


  
    
      
          x     
        t
         
        
          c
          h
          a
          n
          g
          e
          o
          p
          e
          n
        
         
        t
         
        
          x  fa 
        
         
          xac 
        
          o
          p
          e
          n
        
         
        t
         
        
          x  fa 
        
        
          o
          p
          e
          n
        
         
        t
         
         
         
         
      
    
      displaystyle  forall t  mathrm  changeopen   t  iff   neg  mathrm  open   t  iff  mathrm  open   t     
  


  
    
      
          x     
        t
         
        
          c
          h
          a
          n
          g
          e
          o
          n
        
         
        t
         
        
          x  fa 
        
         
          xac 
        
          o
          n
        
         
        t
         
        
          x  fa 
        
        
          o
          n
        
         
        t
         
         
         
         
      
    
      displaystyle  forall t  mathrm  changeon   t  iff   neg  mathrm  on   t  iff  mathrm  on   t     
  

The third formula is a different way of saying that opening the door causes the door to be opened  Precisely  it states that opening the door changes the state of the door if it had been previously closed  The last two conditions state that a condition changes value at time 
  
    
      
        t
      
    
      displaystyle t 
  
 if and only if the corresponding change predicate is true at time 
  
    
      
        t
      
    
      displaystyle t 
  
  To complete the solution  the time points in which the change predicates are true have to be as few as possible  and this can be done by applying predicate completion to the rules specifying the effects of actions 

Successor state axioms solution edit 
The value of a condition after the execution of an action can be determined by
the fact that the condition is true if and only if 

the action makes the condition true  or
the condition was previously true and the action does not make it false 
A successor state axiom is a formalization in logic of these two facts  For
example  if 
  
    
      
        
          o
          p
          e
          n
          d
          o
          o
          r
        
         
        t
         
      
    
      displaystyle  mathrm  opendoor   t  
  
 and 
  
    
      
        
          c
          l
          o
          s
          e
          d
          o
          o
          r
        
         
        t
         
      
    
      displaystyle  mathrm  closedoor   t  
  
 are two
conditions used to denote that the action executed at time 
  
    
      
        t
      
    
      displaystyle t 
  
 was
to open or close the door  respectively  the running example is encoded as
follows 


  
    
      
          xac 
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  open      
  


  
    
      
          xac 
        
          o
          n
        
         
         
         
      
    
      displaystyle  neg  mathrm  on      
  


  
    
      
        
          o
          p
          e
          n
          d
          o
          o
          r
        
         
         
         
      
    
      displaystyle  mathrm  opendoor      
  


  
    
      
          x     
        t
         
        
          o
          p
          e
          n
        
         
        t
         
         
         
        
          x  fa 
        
        
          o
          p
          e
          n
          d
          o
          o
          r
        
         
        t
         
          x     
         
        
          o
          p
          e
          n
        
         
        t
         
          x     
          xac 
        
          c
          l
          o
          s
          e
          d
          o
          o
          r
        
         
        t
         
         
      
    
      displaystyle  forall t  mathrm  open   t    iff  mathrm  opendoor   t  vee   mathrm  open   t  wedge  neg  mathrm  closedoor   t   
  

This solution is centered around the value of conditions  rather than the
effects of actions  In other words  there is an axiom for every condition 
rather than a formula for every action  Preconditions to actions  which are not
present in this example  are formalized by other formulae  The successor state
axioms are used in the variant to the situation calculus proposed by
Ray Reiter 

Fluent calculus solution edit 
The fluent calculus is a variant of the situation calculus  It solves the frame problem by using first order logic terms  rather than predicates  to represent the states  Converting predicates into terms in first order logic is called reification  the fluent calculus can be seen as a logic in which predicates representing the state of conditions are reified 
The difference between a predicate and a term in first order logic is that a term is a representation of an object  possibly a complex object composed of other objects   while a predicate represents a condition that can be true or false when evaluated over a given set of terms 
In the fluent calculus  each possible state is represented by a term obtained by composition of other terms  each one representing the conditions that are true in state  For example  the state in which the door is open and the light is on is represented by the term 
  
    
      
        
          o
          p
          e
          n
        
          x     
        
          o
          n
        
      
    
      displaystyle  mathrm  open   circ  mathrm  on   
  
  It is important to notice that a term is not true or false by itself  as it is an object and not a condition  In other words  the term 
  
    
      
        
          o
          p
          e
          n
        
          x     
        
          o
          n
        
      
    
      displaystyle  mathrm  open   circ  mathrm  on   
  
 represent a possible state  and does not by itself mean that this is the current state  A separate condition can be stated to specify that this is actually the state at a given time  e g   
  
    
      
        
          s
          t
          a
          t
          e
        
         
        
          o
          p
          e
          n
        
          x     
        
          o
          n
        
         
          
         
      
    
      displaystyle  mathrm  state    mathrm  open   circ  mathrm  on       
  
 means that this is the state at time 
  
    
      
          
      
    
      displaystyle    
  
 
The solution to the frame problem given in the fluent calculus is to specify the effects of actions by stating how a term representing the state changes when the action is executed  For example  the action of opening the door at time   is represented by the formula 


  
    
      
        
          s
          t
          a
          t
          e
        
         
        s
          x     
        
          o
          p
          e
          n
        
         
         
         
        
          x  fa 
        
        
          s
          t
          a
          t
          e
        
         
        s
         
         
         
      
    
      displaystyle  mathrm  state   s circ  mathrm  open      iff  mathrm  state   s    
  

The action of closing the door  which makes a condition false instead of true  is represented in a slightly different way 


  
    
      
        
          s
          t
          a
          t
          e
        
         
        s
         
         
         
        
          x  fa 
        
        
          s
          t
          a
          t
          e
        
         
        s
          x     
        
          o
          p
          e
          n
        
         
         
         
      
    
      displaystyle  mathrm  state   s    iff  mathrm  state   s circ  mathrm  open      
  

This formula works provided that suitable axioms are given about 
  
    
      
        
          s
          t
          a
          t
          e
        
      
    
      displaystyle  mathrm  state   
  
 and 
  
    
      
          x     
      
    
      displaystyle  circ  
  
  e g   a term containing the same condition twice is not a valid state  for example  
  
    
      
        
          s
          t
          a
          t
          e
        
         
        
          o
          p
          e
          n
        
          x     
        s
          x     
        
          o
          p
          e
          n
        
         
        t
         
      
    
      displaystyle  mathrm  state    mathrm  open   circ s circ  mathrm  open   t  
  
 is always false for every 
  
    
      
        s
      
    
      displaystyle s 
  
 and 
  
    
      
        t
      
    
      displaystyle t 
  
  

Event calculus solution edit 
The event calculus uses terms for representing fluents  like the fluent calculus  but also has one or more axioms constraining the value of fluents  like the successor state axioms  There are many variants of the event calculus  but one of the simplest and most useful employs a single axiom to represent the law of inertia 


  
    
      
        
          
            h
            o
            l
            d
            s
            A
            t
          
        
         
        F
         
        T
         
         
          x     
      
    
      displaystyle   mathit  holdsAt   F T   leftarrow  
  


  
    
      
         
        
          
            h
            a
            p
            p
            e
            n
            s
            A
            t
          
        
         
        E
         
         
        T
         
         
          x     
        
          
            i
            n
            i
            t
            i
            a
            t
            e
            s
          
        
         
        E
         
         
        F
         
        T
         
         
          x     
         
        T
         
         lt 
        T
         
         
          x     
      
    
      displaystyle    mathit  happensAt   E  T   wedge   mathit  initiates   E  F T   wedge  T  lt T   wedge  
  


  
    
      
          xac 
          x     
        E
         
         
        T
         
        
          
            h
            a
            p
            p
            e
            n
            s
            A
            t
          
        
         
        E
         
         
        T
         
          x     
        
          
            t
            e
            r
            m
            i
            n
            a
            t
            e
            s
          
        
         
        E
         
         
        F
         
        T
         
          x     
         
        T
         
          x     
        T
         lt 
        T
         
         
         
      
    
      displaystyle  neg  exists E  T   mathit  happensAt   E  T  wedge   mathit  terminates   E  F T  wedge  T  leq T lt T    
  

The axiom states that a fluent 
  
    
      
        F
      
    
      displaystyle F 
  
 holds at a time 
  
    
      
        T
         
      
    
      displaystyle T  
  
   if an event 
  
    
      
        E
         
      
    
      displaystyle E  
  
 happens and initiates 
  
    
      
        F
      
    
      displaystyle F 
  
 at an earlier time 
  
    
      
        T
         
      
    
      displaystyle T  
  
  and there is no event 
  
    
      
        E
         
      
    
      displaystyle E  
  
  that happens and terminates 
  
    
      
        F
      
    
      displaystyle F 
  
  after or at the same time as 
  
    
      
        T
         
      
    
      displaystyle T  
  
 and before 
  
    
      
        T
         
      
    
      displaystyle T  
  
 
To apply the event calculus to a particular problem domain  it is necessary to define the 
  
    
      
        i
        n
        i
        t
        i
        a
        t
        e
        s
      
    
      displaystyle initiates 
  
 and 
  
    
      
        t
        e
        r
        m
        i
        n
        a
        t
        e
        s
      
    
      displaystyle terminates 
  
 predicates for that domain  For example 


  
    
      
        
          
            i
            n
            i
            t
            i
            a
            t
            e
            s
          
        
         
        o
        p
        e
        n
        d
        o
        o
        r
         
        o
        p
        e
        n
         
        T
         
         
      
    
      displaystyle   mathit  initiates   opendoor open T   
  


  
    
      
        
          
            t
            e
            r
            m
            i
            n
            a
            t
            e
            s
          
        
         
        o
        p
        e
        n
        d
        o
        o
        r
         
        c
        l
        o
        s
        e
        d
         
        T
         
         
      
    
      displaystyle   mathit  terminates   opendoor closed T   
  


  
    
      
        
          
            i
            n
            i
            t
            i
            a
            t
            e
            s
          
        
         
        c
        l
        o
        s
        e
        d
        o
        o
        r
         
        c
        l
        o
        s
        e
        d
         
        T
         
         
      
    
      displaystyle   mathit  initiates   closedoor closed T   
  


  
    
      
        
          
            t
            e
            r
            m
            i
            n
            a
            t
            e
            s
          
        
         
        c
        l
        o
        s
        e
        d
        d
        o
        o
        r
         
        o
        p
        e
        n
         
        T
         
         
      
    
      displaystyle   mathit  terminates   closeddoor open T   
  

To apply the event calculus to a particular problem in the domain  it is necessary to specify the events that happen in the context of the problem  For example 


  
    
      
        
          
            h
            a
            p
            p
            e
            n
            s
            A
            t
          
        
         
        o
        p
        e
        n
        d
        o
        o
        r
         
         
         
      
    
      displaystyle   mathit  happensAt   opendoor    
  
 

  
    
      
        
          
            h
            a
            p
            p
            e
            n
            s
            A
            t
          
        
         
        c
        l
        o
        s
        e
        d
        o
        o
        r
         
         
         
      
    
      displaystyle   mathit  happensAt   closedoor    
  
 
To solve a problem  such as which fluents hold at time     it is necessary to pose the problem as a goal  such as 


  
    
      
          x     
        F
        l
        u
        e
        n
        t
         
        
          
            h
            o
            l
            d
            s
            A
            t
             
            F
            l
            u
            e
            n
            t
             
             
             
          
        
         
         
      
    
      displaystyle  exists Fluent   mathit  holdsAt Fluent        
  

In this case  obtaining the unique solution 


  
    
      
        F
        l
        u
        e
        n
        t
         
        c
        l
        o
        s
        e
        d
         
      
    
      displaystyle Fluent closed  
  

The event calculus solves the frame problem  eliminating undesired solutions  by using a non monotonic logic  such as first order logic with circumscription            or by treating the event calculus as a logic program using negation as failure 

Default logic solution edit 
The frame problem can be thought of as the problem of formalizing the principle that  by default   everything is presumed to remain in the state in which it is   Leibniz   An Introduction to a Secret Encyclop dia   c          This default  sometimes called the commonsense law of inertia  was expressed by Raymond Reiter in default logic 


  
    
      
        
          
            
              R
               
              x
               
              s
               
              
               
                xa  
              R
               
              x
               
              
                d
                o
              
               
              a
               
              s
               
               
            
            
              R
               
              x
               
              
                d
                o
              
               
              a
               
              s
               
               
            
          
        
      
    
      displaystyle   frac  R x s      R x  mathrm  do   a s    R x  mathrm  do   a s     
  

 if 
  
    
      
        R
         
        x
         
      
    
      displaystyle R x  
  
 is true in situation 
  
    
      
        s
      
    
      displaystyle s 
  
  and it can be assumed            that 
  
    
      
        R
         
        x
         
      
    
      displaystyle R x  
  
 remains true after executing action 
  
    
      
        a
      
    
      displaystyle a 
  
  then we can conclude that 
  
    
      
        R
         
        x
         
      
    
      displaystyle R x  
  
 remains true  
Steve Hanks and Drew McDermott argued  on the basis of their Yale shooting example  that this solution to the frame problem is unsatisfactory   Hudson Turner showed  however  that it works correctly in the presence of appropriate additional postulates 

Answer set programming solution edit 
The counterpart of the default logic solution in the language of answer set programming is a rule with strong negation 


  
    
      
        r
         
        X
         
        T
         
         
         
          x     
        r
         
        X
         
        T
         
         
          xa  
        
          
            not  xa  
          
        
          x   c 
        r
         
        X
         
        T
         
         
         
      
    
      displaystyle r X T    leftarrow r X T      hbox not    sim r X T    
  

 if 
  
    
      
        r
         
        X
         
      
    
      displaystyle r X  
  
 is true at time 
  
    
      
        T
      
    
      displaystyle T 
  
  and it can be assumed that 
  
    
      
        r
         
        X
         
      
    
      displaystyle r X  
  
 remains true at time 
  
    
      
        T
         
         
      
    
      displaystyle T   
  
  then we can conclude that 
  
    
      
        r
         
        X
         
      
    
      displaystyle r X  
  
 remains true  

Separation logic solution edit 
Separation logic is a formalism for reasoning about computer programs using pre post specifications of the form 
  
    
      
         
        
          p
          r
          e
          c
          o
          n
          d
          i
          t
          i
          o
          n
        
         
          xa  
        
          c
          o
          d
          e
        
          xa  
         
        
          p
          o
          s
          t
          c
          o
          n
          d
          i
          t
          i
          o
          n
        
         
      
    
      displaystyle    mathrm  precondition       mathrm  code       mathrm  postcondition     
  
  Separation logic is an extension of Hoare logic oriented to  reasoning about mutable data structures in computer memory and other dynamic resources  and it has a special connective    pronounced  and separately   to support independent reasoning about disjoint memory regions                       
Separation logic employs a tight interpretation of pre post specs  which say that the code can only access memory locations guaranteed to exist by the precondition             This leads to the soundness of the most important inference rule of the logic  the frame rule

  
    
      
        
          
            
               
              
                p
                r
                e
                c
                o
                n
                d
                i
                t
                i
                o
                n
              
               
                xa  
              
                c
                o
                d
                e
              
                xa  
               
              
                p
                o
                s
                t
                c
                o
                n
                d
                i
                t
                i
                o
                n
              
               
            
            
               
              
                p
                r
                e
                c
                o
                n
                d
                i
                t
                i
                o
                n
              
                x     
              
                f
                r
                a
                m
                e
              
               
                xa  
              
                c
                o
                d
                e
              
                xa  
               
              
                p
                o
                s
                t
                c
                o
                n
                d
                i
                t
                i
                o
                n
              
                x     
              
                f
                r
                a
                m
                e
              
               
            
          
        
      
    
      displaystyle   frac     mathrm  precondition       mathrm  code       mathrm  postcondition         mathrm  precondition   ast  mathrm  frame       mathrm  code       mathrm  postcondition   ast  mathrm  frame       
  

The frame rule  allows descriptions of arbitrary memory outside the footprint  memory accessed  of the code to be added to a specification  this enables the initial specification to concentrate only on the footprint   For example  the inference

  
    
      
        
          
            
               
              list
                x     
               
              x
               
               
                xa  
              
                c
                o
                d
                e
              
                xa  
               
              sortedlist
                x     
               
              x
               
               
            
            
               
              list
                x     
               
              x
               
                x     
              sortedlist
                x     
               
              y
               
               
                xa  
              
                c
                o
                d
                e
              
                xa  
               
              sortedlist
                x     
               
              x
               
                x     
              sortedlist
                x     
               
              y
               
               
            
          
        
      
    
      displaystyle   frac     operatorname  list   x      mathrm  code       operatorname  sortedlist   x        operatorname  list   x  ast  operatorname  sortedlist   y      mathrm  code       operatorname  sortedlist   x  ast  operatorname  sortedlist   y      
  

captures that code which sorts a list x does not unsort a separate list y  and it does this without mentioning y at all in the initial spec above the line 
Automation of the frame rule has led to significant increases in the scalability of automated reasoning techniques for code             eventually deployed industrially to codebases with tens of millions of lines            
There appears to be some similarity between the separation logic solution to the frame problem and that of the fluent calculus mentioned above      further explanation needed     

Action description languages edit 
Action description languages elude the frame problem rather than solving it  An action description language is a formal language with a syntax that is specific for describing situations and actions  For example  that the action 
  
    
      
        
          o
          p
          e
          n
          d
          o
          o
          r
        
      
    
      displaystyle  mathrm  opendoor   
  
 makes the door open if not locked is expressed by 


  
    
      
        
          o
          p
          e
          n
          d
          o
          o
          r
        
      
    
      displaystyle  mathrm  opendoor   
  
 causes 
  
    
      
        
          o
          p
          e
          n
        
      
    
      displaystyle  mathrm  open   
  
 if 
  
    
      
          xac 
        
          l
          o
          c
          k
          e
          d
        
      
    
      displaystyle  neg  mathrm  locked   
  

The semantics of an action description language depends on what the language can express  concurrent actions  delayed effects  etc   and is usually based on transition systems 
Since domains are expressed in these languages rather than directly in logic  the frame problem only arises when a specification given in an action description logic is to be translated into logic  Typically  however  a translation is given from these languages to answer set programming rather than first order logic 

See also edit 
Binding problem
Common sense
Commonsense reasoning
Defeasible reasoning
Linear logic
Separation logic
Non monotonic logic
Qualification problem
Ramification problem
Symbol grounding
Yale shooting problem
Notes edit 


  Hayes  Patrick          The Frame Problem and Related Problems in Artificial Intelligence   University of Edinburgh 

  McCarthy  J  P J  Hayes          Some philosophical problems from the standpoint of artificial intelligence   Machine Intelligence              CiteSeerX                     

  Shanahan  M         Solving the frame problem  A mathematical investigation of the common sense law of inertia  MIT Press 

  i e   no contradicting information is known

  Reynolds  J C           Separation logic  A logic for shared mutable data structures   Proceedings   th Annual IEEE Symposium on Logic in Computer Science  Copenhagen  Denmark  IEEE Comput  Soc  pp              CiteSeerX                       doi         LICS               ISBN                         S CID              

  O Hearn  Peter                Separation logic   Communications of the ACM                 doi                  ISSN                

  O Hearn  Peter  Reynolds  John  Yang  Hongseok          Local Reasoning about Programs that Alter Data Structures   In Fribourg  Laurent  ed    Computer Science Logic  Lecture Notes in Computer Science  Vol             Berlin  Heidelberg  Springer  pp             doi                          ISBN                        

  Calcagno Cristiano  Dino Distefano  Peter O Hearn  Hongseok Yang                Compositional Shape Analysis by Means of Bi Abduction   Journal of the ACM                doi                          S CID               

  Distefano  Dino  F hndrich  Manuel  Logozzo  Francesco  O Hearn  Peter                Scaling static analyses at Facebook   Communications of the ACM                 doi                 


References edit 
Doherty  P   Gustafsson  J   Karlsson  L   Kvarnstr m  J           TAL  Temporal action logics language specification and tutorial   Electronic Transactions on Artificial Intelligence                   
Gelfond  M   Lifschitz  V           Representing action and change by logic programs   Journal of Logic Programming                     doi                            f 
Gelfond  M   Lifschitz  V           Action languages   Electronic Transactions on Artificial Intelligence                   
Hanks  S   McDermott  D           Nonmonotonic logic and temporal projection   Artificial Intelligence                   doi                              
Levesque  H   Pirri  F   Reiter  R           Foundations for the situation calculus   Electronic Transactions on Artificial Intelligence                   
Liberatore  P           The complexity of the language A   Electronic Transactions on Artificial Intelligence                 
Lifschitz  V           The frame problem  then and now   PDF   University of Texas at Austin  Archived  PDF  from the original on             Presented at Celebration of John McCarthy s Accomplishments  Stanford University  March          
McCarthy  J   Hayes  P  J           Some philosophical problems from the standpoint of artificial intelligence   Machine Intelligence              CiteSeerX                     
McCarthy  J           Applications of circumscription to formalizing common sense knowledge   Artificial Intelligence              CiteSeerX                      doi                              
Miller  R   Shanahan  M           The event calculus in classical logic   alternative axiomatizations   Electronic Transactions on Artificial Intelligence                
Pirri  F   Reiter  R           Some contributions to the metatheory of the Situation Calculus   Journal of the ACM                   doi                        S CID               
Reiter  R           A logic for default reasoning   PDF   Artificial Intelligence                    CiteSeerX                       doi                              
Reiter  R           The frame problem in the situation calculus  a simple solution  sometimes  and a completeness result for goal regression   In Lifschitz  Vladimir  ed    Artificial Intelligence and Mathematical Theory of Computation  Papers in Honor of John McCarthy  New York  Academic Press  pp                CiteSeerX                      
Sandewall  E           An approach to the Frame Problem and its Implementation   Machine Intelligence             
Sandewall  E          Features and Fluents  Vol        vol      New York  Oxford University Press  ISBN                        
Sandewall  E   Shoham  Y           Non monotonic Temporal Reasoning   In Gabbay  D  M   Hogger  C  J   Robinson  J  A   eds    Handbook of Logic in Artificial Intelligence and Logic Programming  Vol        vol      Oxford University Press  pp                ISBN                        
Sandewall  E           Cognitive robotics logic and its metatheory  Features and fluents revisited   Electronic Transactions on Artificial Intelligence                   
Shanahan  M          Solving the frame problem  A mathematical investigation of the common sense law of inertia  MIT Press  ISBN                    
Thielscher  M           Introduction to the fluent calculus   Electronic Transactions on Artificial Intelligence                   
Toth  J A           Book review  Kenneth M  and Patrick J  Hayes  eds   Reasoning Agents in a Dynamic World  The Frame Problem  Artificial Intelligence                     doi                              
Turner  H           Representing actions in logic programs and default theories  a situation calculus approach   PDF   Journal of Logic Programming                     doi         s                     
External links edit 
Zalta  Edward N   ed     The Frame Problem   Stanford Encyclopedia of Philosophy 
Some Philosophical Problems from the Standpoint of Artificial Intelligence  the original article of McCarthy and Hayes that proposed the problem 
vteJohn McCarthy
Artificial intelligence
Circumscription
Dartmouth workshop
Frame problem
Garbage collection
Lisp
ALGOL   
McCarthy evaluation
McCarthy Formalism
McCarthy    function
Situation calculus
Space fountain






Retrieved from  https   en wikipedia org w index php title Frame problem amp oldid