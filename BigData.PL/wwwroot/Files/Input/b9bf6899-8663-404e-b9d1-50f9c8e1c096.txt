Computer specialized in running Lisp
This article is about the type of computer  For the company  see Lisp Machines 


A Knight machine preserved in the MIT Museum
Lisp machines are general purpose computers designed to efficiently run Lisp as their main software and programming language  usually via hardware support  They are an example of a high level language computer architecture  In a sense  they were the first commercial single user workstations  Despite being modest in number  perhaps       units total as of                  Lisp machines commercially pioneered many now commonplace technologies  including windowing systems  computer mice  high resolution bit mapped raster graphics  computer graphic rendering  laser printing  networking innovations such as Chaosnet  and effective garbage collection             Several firms built and sold Lisp machines in the     s  Symbolics              XL      MacIvory  and other models   Lisp Machines Incorporated  LMI Lambda   Texas Instruments  Explorer  MicroExplorer   and Xerox  Interlisp D workstations   The operating systems were written in Lisp Machine Lisp  Interlisp  Xerox   and later partly in Common Lisp 

Symbolics      Lisp machine

History edit 
Historical context edit 
Artificial intelligence  AI  computer programs of the     s and     s intrinsically required what was then considered a huge amount of computer power  as measured in processor time and memory space  The power requirements of AI research were exacerbated by the Lisp symbolic programming language  when commercial hardware was designed and optimized for assembly  and Fortran like programming languages  At first  the cost of such computer hardware meant that it had to be shared among many users  As integrated circuit technology shrank the size and cost of computers in the     s and early     s  and the memory needs of AI programs began to exceed the address space of the most common research computer  the Digital Equipment Corporation  DEC  PDP     researchers considered a new approach  a computer designed specifically to develop and run large artificial intelligence programs  and tailored to the semantics of the Lisp language  To keep the operating system  relatively  simple  these machines would often not be shared  but would be dedicated to a single user at a time      citation needed     

Initial development edit 
In       Richard Greenblatt and Thomas Knight  programmers at Massachusetts Institute of Technology  MIT  Artificial Intelligence Laboratory  AI Lab   began what would become the MIT Lisp Machine Project when they first began building a computer hardwired to run certain basic Lisp operations  rather than run them in software  in a    bit tagged architecture  The machine also did incremental  or Arena  garbage collection      citation needed      More specifically  since Lisp variables are typed at runtime rather than compile time  a simple addition of two variables could take five times as long on conventional hardware  due to test and branch instructions  Lisp Machines ran the tests in parallel with the more conventional single instruction additions  If the simultaneous tests failed  then the result was discarded and recomputed  this meant in many cases a speed increase by several factors  This simultaneous checking approach was used as well in testing the bounds of arrays when referenced  and other memory management necessities  not merely garbage collection or arrays  
Type checking was further improved and automated when the conventional byte word of         bits was lengthened to         bits for Symbolics      model Lisp machines            and eventually to         bits or more  usually  the excess bits not accounted for by the following were used for error correcting codes   The first group of extra bits were used to hold type data  making the machine a tagged architecture  and the remaining bits were used to implement CDR coding  wherein the usual linked list elements are compressed to occupy roughly half the space   aiding garbage collection by reportedly an order of magnitude  A further improvement was two microcode instructions which specifically supported Lisp functions  reducing the cost of calling a function to as little as    clock cycles  in some Symbolics implementations 
The first machine was called the CONS machine  named after the list construction operator cons in Lisp   Often it was affectionately referred to as the Knight machine  perhaps since Knight wrote his master s thesis on the subject  it was extremely well received      citation needed      It was subsequently improved into a version called CADR  a pun  in Lisp  the cadr function  which returns the second item of a list  is pronounced   ke  d    or   k  d     as some pronounce the word  cadre   which was based on essentially the same architecture  About    of what were essentially prototype CADRs were sold within and without MIT for           it quickly became the favorite machine for hacking                   many of the most favored software tools were quickly ported to it  e g  Emacs was ported from ITS in          disputed             discuss        It was so well received at an AI conference held at MIT in      that Defense Advanced Research Projects Agency  DARPA  began funding its development 

Commercializing MIT Lisp machine technology edit 
This section possibly contains original research  Please improve it by verifying the claims made and adding inline citations  Statements consisting only of original research should be removed    June        Learn how and when to remove this message 
Symbolics       left  and LMI Lambda Lisp machines
In       Russell Noftsker  being convinced that Lisp machines had a bright commercial future due to the strength of the Lisp language and the enabling factor of hardware acceleration  proposed to Greenblatt that they commercialize the technology      citation needed      In a counter intuitive move for an AI Lab hacker  Greenblatt acquiesced  hoping perhaps that he could recreate the informal and productive atmosphere of the Lab in a real business  These ideas and goals were considerably different from those of Noftsker  The two negotiated at length  but neither would compromise  As the proposed firm could succeed only with the full and undivided assistance of the AI Lab hackers as a group  Noftsker and Greenblatt decided that the fate of the enterprise was up to them  and so the choice should be left to the hackers 
The ensuing discussions of the choice divided the lab into two factions  In February       matters came to a head  The hackers sided with Noftsker  believing that a commercial venture fund backed firm had a better chance of surviving and commercializing Lisp machines than Greenblatt s proposed self sustaining start up  Greenblatt lost the battle 
It was at this juncture that Symbolics  Noftsker s enterprise  slowly came together  While Noftsker was paying his staff a salary  he had no building or any equipment for the hackers to work on  He bargained with Patrick Winston that  in exchange for allowing Symbolics  staff to keep working out of MIT  Symbolics would let MIT use internally and freely all the software Symbolics developed  A consultant from CDC  who was trying to put together a natural language computer application with a group of West coast programmers  came to Greenblatt  seeking a Lisp machine for his group to work with  about eight months after the disastrous conference with Noftsker  Greenblatt had decided to start his own rival Lisp machine firm  but he had done nothing  The consultant  Alexander Jacobson  decided that the only way Greenblatt was going to start the firm and build the Lisp machines that Jacobson desperately needed was if Jacobson pushed and otherwise helped Greenblatt launch the firm  Jacobson pulled together business plans  a board  a partner for Greenblatt  one F  Stephen Wyle   The newfound firm was named LISP Machine  Inc   LMI   and was funded by CDC orders  via Jacobson 
Around this time Symbolics  Noftsker s firm  began operating  It had been hindered by Noftsker s promise to give Greenblatt a year s head start  and by severe delays in procuring venture capital  Symbolics still had the major advantage that while   or   of the AI Lab hackers had gone to work for Greenblatt     other hackers had signed onto Symbolics  Two AI Lab people were not hired by either  Richard Stallman and Marvin Minsky  Stallman  however  blamed Symbolics for the decline of the hacker community that had centered around the AI lab  For two years  from      to the end of       Stallman worked by himself to clone the output of the Symbolics programmers  with the aim of preventing them from gaining a monopoly on the lab s computers            
Regardless  after a series of internal battles  Symbolics did get off the ground in            selling the CADR as the LM    while Lisp Machines  Inc  sold it as the LMI CADR  Symbolics did not intend to produce many LM  s  since the      family of Lisp machines was supposed to ship quickly  but the     s were repeatedly delayed  and Symbolics ended up producing      LM  s  each of which sold for          Both firms developed second generation products based on the CADR  the Symbolics      and the LMI LAMBDA  of which LMI managed to sell        The       which shipped a year late  expanded on the CADR by widening the machine word to    bits  expanding the address space to    bits             and adding hardware to accelerate certain common functions that were implemented in microcode on the CADR  The LMI LAMBDA  which came out a year after the       in       was compatible with the CADR  it could run CADR microcode   but hardware differences existed  Texas Instruments  TI  joined the fray when it licensed the LMI LAMBDA design and produced its own variant  the TI Explorer  Some of the LMI LAMBDAs and the TI Explorer were dual systems with both a Lisp and a Unix processor  TI also developed a    bit microprocessor version of its Lisp CPU for the TI Explorer  This Lisp chip also was used for the MicroExplorer   a NuBus board for the Apple Macintosh II  NuBus was initially developed at MIT for use in Lisp machines  
Symbolics continued to develop the      family and its operating system  Genera  and produced the Ivory  a VLSI implementation of the Symbolics architecture  Starting in       several machines based on the Ivory processor were developed  boards for Suns and Macs  stand alone workstations and even embedded systems  I Machine Custom LSI     bit address  Symbolics XL      UX      MacIvory II  in      available platforms were Symbolics XL       MacIvory III  UX       Zora  NXP      pizza box    Texas Instruments shrank the Explorer into silicon as the MicroExplorer which was offered as a card for the Apple Mac II  LMI abandoned the CADR architecture and developed its own K Machine             but LMI went bankrupt before the machine could be brought to market  Before its demise  LMI was working on a distributed system for the LAMBDA using Moby space            
These machines had hardware support for various primitive Lisp operations  data type testing  CDR coding  and also hardware support for incremental garbage collection  They ran large Lisp programs very efficiently  The Symbolics machine was competitive against many commercial super minicomputers  but was never adapted for conventional purposes  The Symbolics Lisp Machines were also sold to some non AI markets like computer graphics  modeling  and animation 
The MIT derived Lisp machines ran a Lisp dialect named Lisp Machine Lisp  descended from MIT s Maclisp  The operating systems were written from the ground up in Lisp  often using object oriented extensions  Later  these Lisp machines also supported various versions of Common Lisp  with Flavors  New Flavors  and Common Lisp Object System  CLOS   

Interlisp  BBN  and Xerox edit 

Bolt  Beranek and Newman  BBN  developed its own Lisp machine  named Jericho             which ran a version of Interlisp  It was never marketed  Frustrated  the whole AI group resigned  and were hired mostly by Xerox  So  Xerox Palo Alto Research Center had  simultaneously with Greenblatt s own development at MIT  developed their own Lisp machines which were designed to run InterLisp  and later Common Lisp   The same hardware was used with different software also as Smalltalk machines and as the Xerox Star office system  These included the Xerox       Dolphin         the Xerox       Dorado  the Xerox       Dandelion         the Xerox       Dandetiger  and the Xerox            Daybreak             The operating system of the Xerox Lisp machines has also been ported to a virtual machine and is available for several platforms as a product named Medley  The Xerox machine was well known for its advanced development environment  InterLisp D   the ROOMS window manager  for its early graphical user interface and for novel applications like NoteCards  one of the first hypertext applications  
Xerox also worked on a Lisp machine based on reduced instruction set computing  RISC   using the  Xerox Common Lisp Processor  and planned to bring it to market by                   which did not occur 

Integrated Inference Machines edit 
In the mid     s  Integrated Inference Machines  IIM  built prototypes of Lisp machines named Inferstar             

Developments of Lisp machines outside the United States edit 
In         a UK firm  Racal Norsk  a joint subsidiary of Racal and Norsk Data  attempted to repurpose Norsk Data s ND     supermini as a microcoded Lisp machine  running CADR software  the Knowledge Processing System  KPS              
There were several attempts by Japanese manufacturers to enter the Lisp machine market  the Fujitsu Facom alpha             mainframe co processor  NTT s Elis                          Toshiba s AI processor  AIP              and NEC s LIME              Several university research efforts produced working prototypes  among them are Kobe University s TAKITAC                RIKEN s FLATS              and Osaka University s EVLIS             
In France  two Lisp Machine projects arose  M L             at Toulouse Paul Sabatier University and later MAIA             
In Germany Siemens designed the RISC based Lisp co processor COLIBRI                                                 

End of the Lisp machines edit 
With the onset of the AI winter and the early beginnings of the microcomputer revolution  which would sweep away the minicomputer and workstation makers  cheaper desktop PCs soon could run Lisp programs even faster than Lisp machines  with no use of special purpose hardware  Their high profit margin hardware business eliminated  most Lisp machine makers had gone out of business by the early   s  leaving only software based firms like Lucid Inc  or hardware makers who had switched to software and services to avoid the crash  As of January               update       besides Xerox and TI  Symbolics is the only Lisp machine firm still operating  selling the Open Genera Lisp machine software environment and the Macsyma computer algebra system                         

Legacy edit 
Several attempts to write open source emulators for various Lisp Machines have been made  CADR Emulation              Symbolics L Lisp Machine Emulation              the E  Project  TI Explorer II Emulation               Meroko  TI Explorer I               and Nevermore  TI Explorer I               On   October       the MIT released the CADR Lisp Machine source code as open source             
In September       Alexander Burger  developer of PicoLisp  announced PilMCU  an implementation of PicoLisp in hardware             
The Bitsavers  PDF Document Archive             has PDF versions of the extensive documentation for the Symbolics Lisp Machines              the TI Explorer             and MicroExplorer             Lisp Machines and the Xerox Interlisp D Lisp Machines             

Applications edit 
Domains using the Lisp machines were mostly in the wide field of artificial intelligence applications  but also in computer graphics  medical image processing  and many others 
The main commercial expert systems of the   s were available  Intellicorp s Knowledge Engineering Environment  KEE   Knowledge Craft  from The Carnegie Group Inc   and ART  Automated Reasoning Tool  from Inference Corporation             

Technical overview edit 
Initially the Lisp machines were designed as personal workstations for software development in Lisp  They were used by one person and offered no multi user mode  The machines provided a large  black and white  bitmap display  keyboard and mouse  network adapter  local hard disks  more than   MB RAM  serial interfaces  and a local bus for extension cards  Color graphics cards  tape drives  and laser printers were optional 
The processor did not run Lisp directly  but was a stack machine with instructions optimized for compiled Lisp  The early Lisp machines used microcode to provide the instruction set  For several operations  type checking and dispatching was done in hardware at runtime  For example  only one addition operation could be used with various numeric types  integer  float  rational  and complex numbers   The result was a very compact compiled representation of Lisp code 
The following example uses a function that counts the number of elements of a list for which a predicate returns true 

 defun example count  predicate list 
   let   count    
     dolist  i list count 
       when  funcall predicate i 
         incf count     

The disassembled machine code for above function  for the Ivory microprocessor from Symbolics  

Command   disassemble  compile       example count  

     ENTRY    REQUIRED    OPTIONAL       Creating PREDICATE and LIST
     PUSH                                Creating COUNT
     PUSH FP                             LIST
     PUSH NIL                            Creating I
     BRANCH   
     SET TO CDR PUSH CAR FP  
     SET SP TO ADDRESS SAVE TOS SP   
     START CALL FP                       PREDICATE
     PUSH FP                             I
     FINISH CALL   VALUE
     BRANCH FALSE   
     INCREMENT FP                        COUNT
     ENDP FP  
     BRANCH FALSE  
     SET SP TO ADDRESS SP   
     RETURN SINGLE STACK

The operating system used virtual memory to provide a large address space  Memory management was done with garbage collection  All code  shared a single address space  All data objects were stored with a tag in memory  so that the type could be determined at runtime  Multiple execution threads were supported and termed processes  All processes ran in the one address space 
All operating system software was written in Lisp  Xerox used Interlisp  Symbolics  LMI  and TI used Lisp Machine Lisp  descendant of MacLisp   With the appearance of Common Lisp  Common Lisp was supported on the Lisp Machines and some system software was ported to Common Lisp or later written in Common Lisp 
Some later Lisp machines  like the TI MicroExplorer  the Symbolics MacIvory or the Symbolics UX          were no longer complete workstations  but boards designed to be embedded in host computers  Apple Macintosh II and Sun   or Sun   
Some Lisp machines  such as the Symbolics XL      had extensive graphics abilities using special graphics boards  These machines were used in domains like medical image processing   D animation  and CAD 

See also edit 
ICAD   example of knowledge based engineering software originally developed on a Lisp machine that was useful enough to be then ported via Common Lisp to Unix
Orphaned technology
References edit 


  Newquist  H P     March        The Brain Makers  Sams Publishing  ISBN                     

  Target  Sinclair     September         A Short History of Chaosnet   Two Bit History  Retrieved   December      

  Moon  David A           Architecture of the Symbolics        ACM SIGARCH Computer Architecture News          Portal acm org         doi                        S CID               

  Levy  S  Hackers  Penguin USA      

  Moon     

  K Machine

  Moby space Archived    February      at the Wayback Machine Patent application        

   Computing Facilities for AI  A Survey of Present and Near Future Options   AI Magazine              

  Tello  Ernest R  July         The Xerox      LISP Machine   Dr  Dobb s Journal  No            pp                The Xerox       nicknamed Daybreak  provides several unique  powerful features at a relatively low cost        The      closely resembles an earlier machine from Xerox the       or Dandelion 

   The AAAI    Conference Exhibits  New Directions for Commercial AI  VLSI Lisp Machine Implementations Are Coming   AI Magazine              

   The AAAI    Conference Exhibits  New Directions for Commercial AI  A New Lisp Machine Vendor   AI Magazine               retrieved    November     

   Computer Algebra in Norway  Racal Norsk KPS   and KPS    Multi User Lisp Machines   Springer link  doi                              cite journal    Cite journal requires       journal   help 

   Facom Alpha   Computer Museum  IPSJ  Retrieved    November      

   NTT ELIS   Computer Museum  IPSJ    September       Retrieved    November      

  Yasushi  Hibino     August         A    bit LISP Processor for the Al Workstation ELIS with a Multiple Programming Paradigm Language  TAO   Journal of Information Processing          NII           Retrieved    November      

  Mitsuo  Saito     August         Architecture of an AI Processor Chip  IP        Journal of Information Processing          NII           Retrieved    November      

   NEC LIME Lisp Machine   Computer Museum  IPSJ  Retrieved    November      

   Kobe University Lisp Machine   Computer Museum  IPSJ     February       Retrieved    November      

   RIKEN FLATS Numerical Processing Computer   Computer Museum  IPSJ  Retrieved    November      

   EVLIS Machine   Computer Museum  IPSJ  Retrieved    November      

   M L  A Lisp machine   Limsi  Retrieved    November      

   MAIA  Machine for Artificial Intelligence   Limsi  Retrieved    November      

  Hafer  Christian  Plankl  Josef  Schmidt  Franz Josef          COLIBRI  A Coprocessor for LISP based on RISC   VLSI for Artificial Intelligence and Neural Networks  Boston  MA  Springer         doi                              ISBN                       

  M ller Schloer          Bewertung der RISC Methodik am Beispiel COLIBRI   in Bode  A  ed    RISC Architekturen      Risc architectures       in German   BI

  Hafer  Christian  Plankl  Josef  Schmitt  FJ      March         COLIBRI  Ein RISC LISP System       Colibri  a RISC  Lisp system       Architektur von Rechensystemen  Tagungsband  in German   M nchen  DE      ITG GI Fachtagung

  Legutko  Christian  Sch fer  Eberhard  Tappe  J rgen       March         Die Befehlspipeline des Colibri Systems       The instruction pipeline of the Colibri system       Architektur und Betrieb von Rechensystemen  Tagungsband  Informatik Fachberichte  in German        Paderborn  DE      ITG GI Fachtagung           doi                               ISBN                       

   symbolics txt  

   A few things I know about LISP Machines  

   CADR Emulation   Unlambda  Retrieved    November      

   Symbolics L Lisp Machine Emulation   Unlambda     May       Retrieved    November      

   The E  Project  TI Explorer II emulation   Unlambda  Retrieved    November      

   Meroko Emulator  TI Explorer I    Unlambda  Retrieved    November      

   Nevermore Emulator  TI Explorer I    Unlambda  Retrieved    November      

   MIT CADR Lisp Machine Source code   Heeltoe  Retrieved    November      

   Announce  PicoLisp in Hardware  PilMCU   

   Bitsavers  PDF Document Archive   Bitsavers  Retrieved    November      

   Symbolics documentation   Bitsavers  Retrieved    November      

   TI Explorer documentation   Bitsavers     May       Retrieved    November      

   TI MicroExplorer documentation   Bitsavers    September       Retrieved    November      

   Xerox Interlisp documentation   Bitsavers     March       Retrieved    November      

  Richter  Mark  AI Tools and Techniques  Ablex Publishing Corporation USA        Chapter    An Evaluation of Expert System Development Tools


General

 LISP Machine Progress Report   Alan Bawden  Richard Greenblatt  Jack Holloway  Thomas Knight  David A  Moon  Daniel Weinreb  AI Lab memos  AI           
 CADR   Thomas Knight  David A  Moon  Jack Holloway  Guy L  Steele  AI Lab memos  AIM           
 Design of LISP based Processors  or SCHEME  A Dielectric LISP  or Finite Memories Considered Harmful  or LAMBDA  The Ultimate Opcode   Guy Lewis Steele  Gerald Jay Sussman  AI Lab memo  AIM          
David A  Moon  Chaosnet  A I  Memo      Massachusetts Institute of Technology Artificial Intelligence Laboratory  June      
 Implementation of a List Processing Machine   Tom Knight  Master s thesis 
Lisp Machine manual   th ed  Richard Stallman  Daniel Weinreb  David A  Moon       
 Anatomy of a LISP Machine   Paul Graham  AI Expert  December     
Free as in Freedom  Richard Stallman s Crusade for Free Software

External links edit 
Symbolics website
Medley
Bitsavers  PDF documents
LMI documentation
MIT CONS documentation
MIT CADR documentation
Lisp Machine Manual  Chinual
 The Lisp Machine manual   th Edition  July      
 The Lisp Machine manual   th Edition  HTML XSL version 
 The Lisp Machine manual 
Information and code for LMI Lambda and LMI K Machine
Jaap Weel s Lisp Machine Webpage at the Wayback Machine      archived    June         A set of links and locally stored documents regarding all manner of Lisp machines
 A Few Things I Know About LISP Machines    A set of links  mostly discussion of buying Lisp machines
Ralf M ller s Symbolics Lisp Machine Museum
Vintage Computer Festival pictures of some Lisp machines  one running Genera
LISPMachine net   Lisp Books and Information
Lisp machines timeline   a timeline of Symbolics  and others  Lisp machines
 in French   Pr sentation G n rale du projet M L    An account of French efforts in the same vein
Discussion
 If It Works  It s Not AI  A Commercial Look at Artificial Intelligence startups 
 Symbolics  Inc   A failure of Heterogenous engineering     PDF 
 My Lisp Experiences and the Development of GNU Emacs    transcript of a speech Richard Stallman gave about Emacs  Lisp  and Lisp machines
vteLisp programmingFeatures
Automatic storage management
Conditionals
Dynamic typing
Higher order functions
Linked lists
Macros
M expressions  deprecated 
Read eval print loop
Recursion
S expressions
Self hosting compiler
Tree data structures
Object systems
Common Lisp Object System  CLOS 
CommonLoops
Flavors
ImplementationsStandardizedCommonLisp
Allegro Common Lisp
Armed Bear Common Lisp  ABCL 
CLISP
Clozure CL
CMU Common Lisp  CMUCL 
Corman Common Lisp
Embeddable Common Lisp  ECL 
GNU Common Lisp  GCL 
LispWorks
Macintosh Common Lisp
Mocl
Movitz
Poplog
Steel Bank Common Lisp  SBCL 
Symbolics Common Lisp
Scheme
History
Bigloo
Chez Scheme
Chicken
Gambit
Game Oriented Assembly Lisp  GOAL 
GNU Guile
Ikarus
JScheme
Kawa
MIT GNU Scheme
MultiLisp
Pico
Pocket Scheme
Racket  features 
Scheme   
SCM
SIOD
T
TinyScheme
ISLISP
OpenLisp
UnstandardizedLogo
MSWLogo
NetLogo
StarLogo
UCBLogo
POP
COWSEL  POP   
POP  
POP   

Arc
AutoLISP
BBN LISP
Clojure
Dylan  Apple  history 
Emacs Lisp
EuLisp
Franz Lisp  PC LISP
Hy
Interlisp
Knowledge Engineering Environment
 Lisp
LeLisp
LFE
LISP  
Lisp Machine Lisp
Lispkit Lisp
Maclisp
MDL
MLisp
newLISP
NIL
PC LISP
Picolisp
Portable Standard Lisp
RPL
S   Lisp
SKILL
Spice Lisp
ZetalispOperating system
List
Common Lisp Interface Manager  McCLIM
Genera
Scsh
Hardware
Lisp machine
TI Explorer
Space cadet keyboard
Communityof practiceTechnical standards
Scheme Requests for Implementation
Common Lisp HyperSpec
X J  
EducationBooks
Common Lisp the Language
How to Design Programs  HTDP 
On Lisp
Practical Common Lisp
Structure and Interpretation of Computer Programs  SICP 
Curriculum
ProgramByDesign
OrganizationsBusiness
Apple Computer
Bolt  Beranek and Newman
Harlequin
Lucid Inc 
Symbolics
Xanalys
Education
Massachusetts Institute of Technology  MIT 
MIT Computer Science and Artificial Intelligence Laboratory  CSAIL 
Stanford Artificial Intelligence Laboratory
University of California  Berkeley
People
Edmund Berkeley
Daniel G  Bobrow
William Clinger
R  Kent Dybvig
Matthias Felleisen
Robert Bruce Findler
Matthew Flatt
Phyllis Fox
Paul Graham
Richard Greenblatt
Timothy P  Hart
Louis Hodes
Mike Levin
David Luckham
John McCarthy
Robert Tappan Morris
Joel Moses
David Park
Steve Russell
Richard Stallman
Common Lisp
Scott Fahlman
Richard P  Gabriel
Philip Greenspun    th rule 
David A  Moon
Kent Pitman
Guy L  Steele Jr 
Daniel Weinreb
Scheme
Matthias Felleisen
Shriram Krishnamurthi
Guy L  Steele Jr 
Gerald Jay Sussman
Julie Sussman
Logo
Hal Abelson
Denison Bollay
Wally Feurzeig
Brian Harvey
Seymour Papert
Mitchel Resnick
Cynthia Solomon
POP
Rod Burstall
Robin Popplestone
 List  Books  Commons  Category  Category





Retrieved from  https   en wikipedia org w index php title Lisp machine amp oldid