Programming language that uses first order logic
This article is about the programming language  For the narrative device  see Prologue  For other uses  see Prologue  disambiguation  
PrologParadigmLogicDesigned      byAlain ColmerauerFirst      appeared                      years ago            Stable releasePart    General core Edition    June                            years ago                Part    Modules Edition    June                            years ago                
   
Typing disciplineUntyped  its single data type is  term  Filename extensions pl   pro   PWebsitePart    www iso org standard       html Part    www iso org standard       htmlMajor implementationsAmzi  Prolog  B Prolog  Ciao  ECLiPSe  GNU Prolog   LPA Prolog  Poplog  P   Quintus Prolog  Scryer Prolog  SICStus  Strawberry  SWI Prolog   Tau Prolog  tuProlog  WIN PROLOG XSB  YAP DialectsISO Prolog  Edinburgh PrologInfluenced byPlannerInfluencedCHR  Clojure  Datalog  Erlang  Epilog  KL   KL   Logtalk  Mercury  Oz  Strand  Visual Prolog
 Prolog at Wikibooks

Prolog is a logic programming language that has its origins in artificial intelligence  automated theorem proving and computational linguistics                                  
Prolog has its roots in first order logic  a formal logic  and unlike many other programming languages  Prolog is intended primarily as a declarative programming language  the program is a set of facts and rules  which define relations   A computation is initiated by running a query over the program            
Prolog was one of the first logic programming languages            and remains the most popular such language today  with several free and commercial implementations available  The language has been used for theorem proving             expert systems             term rewriting             type systems             and automated planning              as well as its original intended field of use  natural language processing                         
Prolog is a Turing complete  general purpose programming language  which is well suited for intelligent knowledge processing applications 


History edit 

Timeline of Prolog language


Year

Aix Marseille

ISO IEC Standard


    

Prolog  

 


    

Prolog I

 


    

Prolog II

 


    

Prolog III

 


    

 

       


    

Prolog IV

 


    

 

       


    

 

             Cor       


    

 

             Cor       


    

 

             Cor       

Timeline of some early Prolog systems  up to the ISO Standard
The name Prolog was chosen by Philippe Roussel  at the suggestion of his wife  as an abbreviation for Programmation en logique  French for Programming in logic               It was created around      by Alain Colmerauer with Philippe Roussel  from the Artificial Intelligence Group of the Faculty of Sciences of Luminy of Aix Marseille II University of France  It was based on Robert Kowalski s procedural interpretation of Horn clauses  and it was motivated in part by the desire to reconcile the use of logic as a declarative knowledge representation language with the procedural representation of knowledge that was popular in North America in the late     s and early     s  According to Robert Kowalski  the first Prolog system was developed in      by Colmerauer and Phillipe Roussel                                      The first implementation of Prolog was an interpreter written in Fortran by Gerard Battani and Henri Meloni  David H  D  Warren took this interpreter to the University of Edinburgh  and there implemented an alternative front end  which came to define the  Edinburgh Prolog  syntax used by most modern implementations  Warren also implemented the first compiler for Prolog  creating the influential DEC    Prolog in collaboration with Fernando Pereira  Warren later generalised the ideas behind DEC    Prolog  to create the Warren Abstract Machine  WAM  
European AI researchers favored Prolog while Americans favored Lisp  reportedly causing many nationalistic debates on the merits of the languages              Much of the modern development of Prolog came from the impetus of the Fifth Generation Computer Systems project  FGCS   which developed a variant of Prolog named Kernel Language for its first operating system 
Pure Prolog was originally restricted to the use of a resolution theorem prover with Horn clauses of the form 

H         B        Bn 

The application of the theorem prover treats such clauses as procedures 

to show solve H  show solve B  and     and Bn 

Pure Prolog was soon extended  however  to include negation as failure  in which negative conditions of the form not Bi  are shown by trying and failing to solve the corresponding positive conditions Bi 
Subsequent extensions of Prolog by the original team introduced constraint logic programming abilities into the implementations 

Impact edit 
Although Prolog is widely used in research and education              Prolog and other logic programming languages have not had a significant impact on the computer industry in general              Most applications are small by industrial standards  with few exceeding         lines of code                          Programming in the large is considered to be complex because not all Prolog compilers support modules  and there are compatibility problems between the module systems of the major Prolog compilers              Portability of Prolog code across implementations has also been a problem  but developments since      have meant   the portability within the family of Edinburgh Quintus derived Prolog implementations is good enough to allow for maintaining portable real world applications              
Software developed in Prolog has been criticised for having a high performance penalty compared to conventional programming languages  In particular  Prolog s non deterministic evaluation strategy can be problematic when programming deterministic computations  or when even using  don t care non determinism   where a single choice is made instead of backtracking over all possibilities   Cuts and other language constructs may have to be used to achieve desirable performance  destroying one of Prolog s main attractions  the ability to run programs  backwards and forwards              
Prolog is not purely declarative  because of constructs like the cut operator  a procedural reading of a Prolog program is needed to understand it              The order of clauses in a Prolog program is significant  as the execution strategy of the language depends on it              Other logic programming languages  such as Datalog  are truly declarative but restrict the language  As a result  many practical Prolog programs are written to conform to Prolog s depth first search order  rather than as purely declarative logic programs             

Use in industry edit 
Prolog has been used in Watson  Watson uses IBM s DeepQA software and the Apache UIMA  Unstructured Information Management Architecture  framework  The system was written in various languages  including Java  C    and Prolog  and runs on the SUSE Linux Enterprise Server    operating system using Apache Hadoop framework to provide distributed computing  Prolog is used for pattern matching over natural language parse trees  The developers have stated   We required a language in which we could conveniently express pattern matching rules over the parse trees and other annotations  such as named entity recognition results   and a technology that could execute these rules very efficiently  We found that Prolog was the ideal choice for the language due to its simplicity and expressiveness               Prolog is being used in the Low Code Development Platform GeneXus  which is focused around AI      citation needed      Open source graph database TerminusDB is implemented in Prolog              TerminusDB is designed for collaboratively building and curating knowledge graphs 

Syntax and semantics edit 
Main article  Prolog syntax and semantics
In Prolog  program logic is expressed in terms of relations  and a computation is initiated by running a query over these relations  Relations and queries are constructed using Prolog s single data type  the term             Relations are defined by clauses  Given a query  the Prolog engine attempts to find a resolution refutation of the negated query  If the negated query can be refuted  i e   an instantiation for all free variables is found that makes the union of clauses and the singleton set consisting of the negated query false  it follows that the original query  with the found instantiation applied  is a logical consequence of the program  This makes Prolog  and other logic programming languages  particularly useful for database  symbolic mathematics  and language parsing applications  Because Prolog allows impure predicates  checking the truth value of certain special predicates may have some deliberate side effect  such as printing a value to the screen  Because of this  the programmer is permitted to use some amount of conventional imperative programming when the logical paradigm is inconvenient  It has a purely logical subset  called  pure Prolog   as well as a number of extralogical features 

Data types edit 
Prolog s single data type is the term  Terms are either atoms  numbers  variables or compound terms      note       

An atom is a symbol name starting with a lower case letter or guarded by quotes  Examples of atoms include x  red   Taco    some atom   and  p a   
Numbers can be floats or integers   Most of the major Prolog systems support arbitrary length integer numbers 
Variables are denoted by a string consisting of letters  numbers and underscore characters  and beginning with an upper case letter or underscore  Variables closely resemble variables in logic in that they are placeholders for arbitrary terms 
A compound term is composed of an atom called a  functor  and a number of  arguments   which are again terms  Compound terms are ordinarily written as a functor followed by a comma separated list of argument terms  which is contained in parentheses  The number of arguments is called the term s arity  An atom can be regarded as a compound term with arity zero  An example of a compound term is person friends zelda  tom jim   
Special cases of compound terms 

A List is an ordered collection of terms  It is denoted by square brackets with the terms separated by commas  or in the case of the empty list  by     For example            or  red green blue  
Strings  A sequence of characters surrounded by quotes is equivalent to either a list of  numeric  character codes  a list of characters  atoms of length     or an atom depending on the value of the Prolog flag double quotes  For example   to be  or not to be              
Rules and facts edit 
Prolog programs describe relations  defined by means of clauses  Pure Prolog is restricted to Horn clauses  Two types of Horn clauses are used to define Prolog programs  rules and facts  A rule is of the form

Head    Body 

and is read as  Head is true if Body is true   A rule s body consists of calls to predicates  which are called the rule s goals  The built in logical operator      meaning an arity   operator with name    denotes conjunction of goals  and     denotes disjunction  Conjunctions and disjunctions can only appear in the body  not in the head of a rule 
Clauses with empty bodies are called facts  An example of a fact is 

human socrates  

which is equivalent to the rule 

human socrates     true 

The built in predicate true   is always true 
Given the above fact  one can ask 
is socrates a human 

    human socrates  
 Yes

what things are humans 

    human X  
 X   socrates

Clauses with bodies are called rules  An example of a rule is 

mortal X     human X  

If we add that rule and ask what things are mortals 

    mortal X  
 X   socrates

Predicates and programs edit 
A predicate  or procedure definition  is a collection of clauses whose heads have the same name and arity  We use the notation name arity to refer to predicates  A logic program is a set of predicates   For example  the following Prolog program  which defines some family relations  has four predicates  mother child trude  sally  

father child tom  sally  
father child tom  erica  
father child mike  tom  

sibling X  Y          parent child Z  X   parent child Z  Y   not X   Y  

parent child X  Y     father child X  Y  
parent child X  Y     mother child X  Y  

Predicate father child   has three clauses  all of which are facts  and predicate parent child   has two clauses  both are rules 
Due to the relational nature of many built in predicates  they can typically be used in several directions  For example  length   can be used to determine the length of a list  length List  L   given a list List   and to generate a list skeleton of a given length  length X       and to generate both list skeletons and their lengths together  length X  L    Similarly  append   can be used both to append two lists  append ListA  ListB  X  given lists ListA and ListB   and to split a given list into parts  append X  Y  List   given a list List   For this reason  a comparatively small set of library predicates suffices for many Prolog programs 
As a general purpose language  Prolog also provides various built in predicates to perform routine activities like input output  using graphics and otherwise communicating with the operating system  These predicates are not given a relational meaning and are only useful for the side effects they exhibit on the system  For example  the predicate write   displays a term on the screen 

Loops and recursion edit 
Iterative algorithms can be implemented by means of recursive predicates             

Consider the parent child   predicate defined in the family relation program above  The following Prolog program defines the ancestor relation ancestor X  Y     parent child X  Y  
ancestor X  Y     parent child X  Z   ancestor Z  Y  
It expresses that X is an ancestor of Y if X is parent of Y or X is parent of an ancestor of Y   It is recursive because it is defined in terms of itself  there is a call to predicate ancestor   in the body of the second clause     
Execution edit 
Execution of a Prolog program is initiated by the user s posting of a single goal  called the query  Logically  the Prolog engine tries to find a resolution refutation of the negated query  The resolution method used by Prolog is called SLD resolution  If the negated query can be refuted  it follows that the query  with the appropriate variable bindings in place  is a logical consequence of the program  In that case  all generated variable bindings are reported to the user  and the query is said to have succeeded  Operationally  Prolog s execution strategy can be thought of as a generalization of function calls in other languages  one difference being that multiple clause heads can match a given call  In that case  the system creates a choice point  unifies the goal with the clause head of the first alternative  and continues with the goals of that first alternative  If any goal fails in the course of executing the program  all variable bindings that were made since the most recent choice point was created are undone  and execution continues with the next alternative of that choice point  This execution strategy is called chronological backtracking  For example  given the family relation program defined above  the following query will be evaluated to true 

    sibling sally  erica  
 Yes

This is obtained as follows  Initially  the only matching clause head for the query sibling sally  erica  is the first one  so proving the query is equivalent to proving the body of that clause with the appropriate variable bindings in place  i e   the conjunction  parent child Z sally   parent child Z erica    The next goal to be proved is the leftmost one of this conjunction  i e   parent child Z  sally   Two clause heads match this goal  The system creates a choice point and tries the first alternative  whose body is father child Z  sally   This goal can be proved using the fact father child tom  sally   so the binding Z   tom is generated  and the next goal to be proved is the second part of the above conjunction  parent child tom  erica   Again  this can be proved by the corresponding fact  Since all goals could be proved  the query succeeds  Since the query contained no variables  no bindings are reported to the user  A query with variables  like 

   father child Father  Child  

enumerates all valid answers on backtracking 
Notice that with the code as stated above  the query    sibling sally  sally   also succeeds  One would insert additional goals to describe the relevant restrictions  if desired 

Negation edit 
The built in Prolog predicate      provides negation as failure  which allows for non monotonic reasoning  The goal    illegal X  in the rule

legal X        illegal X  

is evaluated as follows  Prolog attempts to prove illegal X   If a proof for that goal can be found  the original goal  i e      illegal X   fails  If no proof can be found  the original goal succeeds  Therefore  the      prefix operator is called the  not provable  operator  since the query       Goal  succeeds if Goal is not provable  This kind of negation is sound if its argument is  ground   i e  contains no variables   Soundness is lost if the argument contains variables and the proof procedure is complete  In particular  the query    legal X   now cannot be used to enumerate all things that are legal 

Programming in Prolog edit 
In Prolog  loading code is referred to as consulting  Prolog can be used interactively by entering queries at the Prolog prompt     If there is no solution  Prolog writes no  If a solution exists then it is printed  If there are multiple solutions to the query  then these can be requested by entering a semi colon    There are guidelines on good programming practice to improve code efficiency  readability and maintainability             
Here follow some example programs written in Prolog 

Hello World edit 
Example of a basic query in a couple of popular Prolog dialects 




SWI Prolog

GNU Prolog


   write      Hello World         nl 
Hello World 
true 

  


     write      Hello World         nl 
Hello World 

yes
    


This comparison shows the prompt       vs              and resolution status   true   vs  yes    false   vs  no   can differ from one Prolog implementation to another 

Compiler optimization edit 
Any computation can be expressed declaratively as a sequence of state transitions  As an example  an optimizing compiler with three optimization passes could be implemented as a relation between an initial program and its optimized form 

program optimized Prog   Prog    
    optimization pass   Prog   Prog   
    optimization pass   Prog   Prog   
    optimization pass   Prog   Prog  

or equivalently using DCG notation 

program optimized    gt  optimization pass    optimization pass    optimization pass   

Quicksort edit 
The quicksort sorting algorithm  relating a list to its sorted version 

partition                
partition  X Xs   Pivot  Smalls  Bigs    
        X   lt  Pivot   gt 
        Smalls    X Rest  
        partition Xs  Pivot  Rest  Bigs 
        Bigs    X Rest  
        partition Xs  Pivot  Smalls  Rest 
      

quicksort            gt     
quicksort  X Xs      gt 
      partition Xs  X  Smaller  Bigger    
    quicksort Smaller    X   quicksort Bigger  

Design patterns of Prolog edit 
A design pattern is a general reusable solution to a commonly occurring problem in software design  Some design patterns in Prolog are skeletons  techniques                          cliches              program schemata              logic description schemata              and higher order programming             

Higher order programming edit 
Main articles  Higher order logic and Higher order programming
A higher order predicate is a predicate that takes one or more other predicates as arguments  Although support for higher order programming takes Prolog outside the domain of first order logic  which does not allow quantification over predicates              ISO Prolog now has some built in higher order predicates such as call    call    call    findall    setof    and bagof                Furthermore  since arbitrary Prolog goals can be constructed and evaluated at run time  it is easy to write higher order predicates like maplist    which applies an arbitrary predicate to each member of a given list  and sublist    which filters elements that satisfy a given predicate  also allowing for currying             
To convert solutions from temporal representation  answer substitutions on backtracking  to spatial representation  terms   Prolog has various all solutions predicates that collect all answer substitutions of a given query in a list  This can be used for list comprehension  For example  perfect numbers equal the sum of their proper divisors 

 perfect N    
     between    inf  N   U is N      
     findall D   between   U D   N mod D         Ds  
     sumlist Ds  N  

This can be used to enumerate perfect numbers  and to check if a number is perfect 
As another example  the predicate maplist applies a predicate P to all corresponding positions in a pair of lists 

maplist            
maplist P   X Xs    Y Ys     
   call P  X  Y  
   maplist P  Xs  Ys  

When P is a predicate that for all X  P X Y  unifies Y with a single unique value  maplist P  Xs  Ys  is equivalent to applying the map function in functional programming as Ys   map Function  Xs  
Higher order programming style in Prolog was pioneered in HiLog and  Prolog 

Modules edit 
For programming in the large  Prolog provides a module system  which is in the ISO Standard             
However  while most Prolog systems support structuring the code into modules  virtually no implementation adheres to the modules part of the ISO standard  Instead  most Prolog systems have decided to support as de facto module standard the Quintus SICStus module system  However  further convenience predicates concerning modules are provided by some implementations only and often have subtle differences in their semantics             
Some systems chose to implement module concepts as source to source compilation into base ISO Prolog  as is the case of Logtalk              GNU Prolog initially diverted from ISO modules  opting instead for Contextual Logic Programming  in which unit  module  loading and unloading can be made dynamically               Ciao designed a strict module system that  while being basically compatible with the de facto standard used by other Prolog systems  is amenable to precise static analysis  supports term hiding  and facilitates programming in the large               XSB takes a different approach and offers an atom based module system              The latter two Prolog systems allow controlling the visibility of terms in addition to that of predicates             

Parsing edit 
Main articles  Prolog syntax and semantics        Definite clause grammars  and Definite clause grammar
There is a special notation called definite clause grammars  DCGs   A rule defined via    gt    instead of      is expanded by the preprocessor  expand term    a facility analogous to macros in other languages  according to a few straightforward rewriting rules  resulting in ordinary Prolog clauses  Most notably  the rewriting equips the predicate with two additional arguments  which can be used to implicitly thread state around      clarification needed      analogous to monads in other languages  DCGs are often used to write parsers or list generators  as they also provide a convenient interface to difference lists 

Meta interpreters and reflection edit 
Prolog is a homoiconic language and provides many facilities for reflective programming  reflection   Its implicit execution strategy makes it possible to write a concise meta circular evaluator  also called meta interpreter  for pure Prolog code 

solve true  
solve  Subgoal  Subgoal      
    solve Subgoal   
    solve Subgoal   
solve Head    
    clause Head  Body  
    solve Body  

where true represents an empty conjunction  and clause Head  Body  unifies with clauses in the database of the form Head         Body 
Since Prolog programs are themselves sequences of Prolog terms       is an infix operator  that are easily read and inspected using built in mechanisms  like read     it is possible to write customized interpreters that augment Prolog with domain specific features  For example  Sterling and Shapiro present a meta interpreter that performs reasoning with uncertainty  reproduced here with slight modifications                                   

solve true          
solve  Subgoal  Subgoal    Certainty    
      
    solve Subgoal   Certainty   
    solve Subgoal   Certainty   
    Certainty is min Certainty   Certainty   
solve Goal       
    builtin Goal     
    Goal 
solve Head  Certainty    
    clause cf Head  Body  Certainty   
    solve Body  Certainty   
    Certainty is Certainty    Certainty  

This interpreter uses a table of built in Prolog predicates of the form                                  

builtin A is B  
builtin read X   
  etc 

and clauses represented as clause cf Head  Body  Certainty   Given those  it can be called as solve Goal  Certainty  to execute Goal and obtain a measure of certainty about the result 

Turing completeness edit 
Pure Prolog is based on a subset of first order predicate logic  Horn clauses  which is Turing complete  Turing completeness of Prolog can be shown by using it to simulate a Turing machine 

turing Tape   Tape    
    perform q       Ls  Tape   Rs  
    reverse Ls  Ls   
    append Ls   Rs  Tape  

perform qf  Ls  Ls  Rs  Rs       
perform Q   Ls   Ls  Rs   Rs    
    symbol Rs   Sym  RsRest  
    once rule Q   Sym  Q   NewSym  Action   
    action Action  Ls   Ls    NewSym RsRest   Rs   
    perform Q   Ls   Ls  Rs   Rs  

symbol     b      
symbol  Sym Rs   Sym  Rs  

action left  Ls   Ls  Rs   Rs     left Ls   Ls  Rs   Rs  
action stay  Ls  Ls  Rs  Rs  
action right  Ls    Sym Ls     Sym Rs   Rs  

left         Rs    b Rs    
left  L Ls   Ls  Rs   L Rs   

A simple example Turing machine is specified by the facts 

rule q      q      right  
rule q   b  qf     stay  

This machine performs incrementation by one of a number in unary encoding  It loops over any number of     cells and appends an additional     at the end  Example query and result 

   turing          Ts  
Ts                 

This illustrates how any computation can be expressed declaratively as a sequence of state transitions  implemented in Prolog as a relation between successive states of interest 

Implementation edit 
Further information  Comparison of Prolog implementations
Prolog Heritage Systems with a dark gray background are not supported any more  Arrows denote influences and inspiration of systems  Quick legend  JIT    Just in Time Compiler   JVM    Java Virtual Machine   TOAM    Tree Oriented Abstract Machine 
ISO Prolog edit 
The International Organization for Standardization  ISO  Prolog technical standard consists of two parts  ISO IEC                                  published in       aims to standardize the existing practices of the many implementations of the core elements of Prolog  It has clarified aspects of the language that were previously ambiguous and leads to portable programs  There are three corrigenda  Cor                     Cor                     and Cor                     ISO IEC                      published in       adds support for modules to the standard  The standard is maintained by the ISO IEC JTC  SC   WG               working group  ANSI X J   is the US Technical Advisory Group for the standard             

Compilation edit 
For efficiency  Prolog code is typically compiled to abstract machine code  often influenced by the register based Warren Abstract Machine  WAM  instruction set              Some implementations employ abstract interpretation to derive type and mode information of predicates at compile time  or compile to real machine code for high performance              Devising efficient implementation methods for Prolog code is a field of active research in the logic programming community  and various other execution methods are employed in some implementations  These include clause binarization and stack based virtual machines      citation needed     

Tail recursion edit 
Prolog systems typically implement a well known optimization method called tail call optimization  TCO  for deterministic predicates exhibiting tail recursion or  more generally  tail calls  A clause s stack frame is discarded before performing a call in a tail position  Therefore  deterministic tail recursive predicates are executed with constant stack space  like loops in other languages 

Term indexing edit 
Main article  Term indexing
Finding clauses that are unifiable with a term in a query is linear in the number of clauses  Term indexing uses a data structure that enables sub linear time lookups              Indexing only affects program performance  it does not affect semantics  Most Prologs only use indexing on the first term  as indexing on all terms is expensive  but techniques based on field encoded words or superimposed codewords provide fast indexing across the full query and head                         

Hashing edit 
Some Prolog systems  such as WIN PROLOG and SWI Prolog  now implement hashing to help handle large datasets more efficiently  This tends to yield very large performance gains when working with large corpora such as WordNet 

Tabling edit 
Main article  Tabled logic programming
Some Prolog systems   B Prolog  XSB  SWI Prolog  YAP  and Ciao   implement a memoization method called tabling  which frees the user from manually storing intermediate results  Tabling is a space time tradeoff  execution time can be reduced by using more memory to store intermediate results                         

Subgoals encountered in a query evaluation are maintained in a table  along with answers to these subgoals  If a subgoal is re encountered  the evaluation reuses information from the table rather than re performing resolution against program clauses             
Tabling can be extended in various directions  It can support recursive predicates through SLG resolution or linear tabling  In a multi threaded Prolog system tabling results could be kept private to a thread or shared among all threads  And in incremental tabling  tabling might react to changes 

Implementation in hardware edit 
During the Fifth Generation Computer Systems project  there were attempts to implement Prolog in hardware with the aim of achieving faster execution with dedicated architectures                                      Furthermore  Prolog has a number of properties that may allow speed up through parallel execution              A more recent approach has been to compile restricted Prolog programs to a field programmable gate array              However  rapid progress in general purpose hardware has consistently overtaken more specialised architectures 
In       computers operated at around        to         LIPS  logical inferences per second   The FGCS planned to produce computers operating at     to   GLIPS              The Institute for New Generation Computer Technology documents estimated that   LIP took about     operations on a conventional computer  The plan was to produce at the end of the project  in       a machine with      processors achieving   GLIPS  implying at least   MLIPS per processor             
Sega implemented Prolog for use with the Sega AI Computer  released for the Japanese market in       Prolog was used for reading natural language inputs  in the Japanese language  via a touch pad             

Extensions edit 
Various implementations have been developed from Prolog to extend logic programming abilities in many directions  These include types  modes  constraint logic programming  CLP   object oriented logic programming  OOLP   concurrency  linear logic  LLP   functional and higher order logic programming abilities  plus interoperability with knowledge bases 

Types edit 
Prolog is an untyped language  Attempts to introduce and extend Prolog with types began in the     s                          and continue as of          update                   Type information is useful not only for type safety but also for reasoning about Prolog programs             

Modes edit 



Mode specifier

Interpretation


 

nonvar on entry


 

var on entry


 

Not specified

The syntax of Prolog does not specify which arguments of a predicate are inputs and which are outputs              However  this information is significant and it is recommended that it be included in the comments              Modes provide valuable information when reasoning about Prolog programs             and can also be used to accelerate execution             

Constraints edit 
Constraint logic programming extends Prolog to include concepts from constraint satisfaction                          A constraint logic program allows constraints in the body of clauses  such as  A X Y          X Y gt    It is suited to large scale combinatorial optimisation problems             and is thus useful for applications in industrial settings  such as automated time tabling and production scheduling  Most Prolog systems ship with at least one constraint solver for finite domains  and often also with solvers for other domains like rational numbers 

Object orientation edit 
Flora   is an object oriented knowledge representation and reasoning system based on F logic and incorporates HiLog  Transaction logic  and defeasible reasoning 
Logtalk is an object oriented logic programming language that can use most Prolog implementations as a back end compiler  As a multi paradigm language  it includes support for both prototypes and classes 
Oblog is a small  portable  object oriented extension to Prolog by Margaret McDougall of EdCAAD  University of Edinburgh 
Objlog was a frame based language combining objects and Prolog II from CNRS  Marseille  France 
Prolog   was developed by Logic Programming Associates and first released in      for MS DOS PCs  Support for other platforms was added  and a second version was released in       A book about Prolog   by Chris Moss was published by Addison Wesley in      
Visual Prolog is a multi paradigm language with interfaces  classes  implementations and object expressions 

Graphics edit 
Prolog systems that provide a graphics library are SWI Prolog              Visual Prolog  WIN PROLOG  and B Prolog 

Concurrency edit 
Prolog MPI is an open source SWI Prolog extension for distributed computing over the Message Passing Interface              Also there are various concurrent Prolog programming languages             

Web programming edit 
Some Prolog implementations  notably Visual Prolog  SWI Prolog and Ciao  support server side web programming with support for web protocols  HTML and XML              There are also extensions to support semantic web formats such as Resource Description Framework  RDF  and Web Ontology Language  OWL                           Prolog has also been suggested as a client side language              In addition  Visual Prolog supports JSON RPC and Websockets 

Adobe Flash edit 
Cedar Archived            at the Wayback Machine is a free and basic Prolog interpreter  From version   and above Cedar has a FCA  Flash Cedar App  support  This provides a new platform to programming in Prolog through ActionScript 

Other edit 
F logic extends Prolog with frames objects for knowledge representation 
Transaction logic extends Prolog with a logical theory of state changing update operators  It has both a model theoretic and procedural semantics 
OW Prolog has been created in order to answer Prolog s lack of graphics and interface 
Interfaces to other languages edit 
Frameworks exist which can bridge between Prolog and other languages 

The LPA Intelligence Server allows embedding LPA Prolog for Windows in other programming languages  including  C  C    C   Java  Visual Basic  VB   Delphi   NET  Lua  Python  and others  It exploits the dedicated string data type which LPA Prolog provides
The Logic Server Application Programming Interface  API  allows both the extension and embedding of Prolog in C  C    Java  Visual Basic  VB   Delphi   NET  and any language or environment which can call a  dll or  so  It is implemented for Amzi  Prolog   Logic Server but the API specification can be made available for any implementation 
JPL is a bi directional Java Prolog bridge which ships with SWI Prolog by default  allowing Java and Prolog to call each other  recursively   It is known to have good concurrency support and is under active development 
InterProlog  a programming library bridge between Java and Prolog  implementing bi directional predicate method calling between both languages  Java objects can be mapped into Prolog terms and vice versa  Allows the development of graphical user interfaces  GUIs  and other functions in Java while leaving logic processing in the Prolog layer  Supports XSB and SWI Prolog 
Prova provides native syntax integration with Java  agent messaging and reaction rules  Prova positions itself as a rule based scripting  RBS  system for middleware  The language breaks new ground in combining imperative and declarative programming 
PROL An embeddable Prolog engine for Java  It includes a small IDE and a few libraries 
GNU Prolog for Java is an implementation of ISO Prolog as a Java library  gnu prolog 
Ciao provides interfaces to C  C    Java  and relational databases 
C  Prolog is a Prolog interpreter written in  managed  C   Can easily be integrated in C  programs  Characteristics  reliable and fairly fast interpreter  command line interface  Windows interface  builtin DCG  XML predicates  SQL predicates  extendible  The complete source code is available  including a parser generator that can be used for adding special purpose extensions 
A Warren Abstract Machine for PHP A Prolog compiler and interpreter in PHP      A library that can be used standalone or within Symfony    framework which was translated from Stephan Buettcher s work in Java which can be found  here stefan buettcher org cs wam  
tuProlog is a lightweight Prolog system for distributed applications and infrastructures  intentionally designed around a minimal core  to be either statically or dynamically configured by loading unloading libraries of predicates  tuProlog natively supports multi paradigm programming  providing a clean  seamless integration model between Prolog and mainstream object oriented languages  namely Java  for tuProlog Java version  and any  NET based language  C   F      for tuProlog  NET version 
Janus is a bi directional interface between Prolog and Python using portable low level primitives  It was initially developed for XSB by Anderson and Swift              but has been adopted as a joint initiative by the XSB  Ciao and SWI Prolog teams 
See also edit 
Comparison of Prolog implementations
Logico linguistic modeling  A method for building knowledge based system that uses Prolog 
Answer set programming  A fully declarative approach to logic programming 
Association for Logic Programming
Related languages edit 
The G del language is a strongly typed implementation of concurrent constraint logic programming  It is built on SICStus Prolog 
Visual Prolog  formerly named PDC Prolog and Turbo Prolog  is a strongly typed object oriented dialect of Prolog  which is very different from standard Prolog  As Turbo Prolog  it was marketed by Borland  but is now developed and marketed by the Danish firm Prolog Development Center  PDC  that originally produced it 
Datalog is a subset of Prolog  It is limited to relationships that may be stratified and does not allow compound terms  In contrast to Prolog  Datalog is not Turing complete 
Mercury is an offshoot of Prolog geared toward software engineering in the large with a static  polymorphic type system  as well as a mode and determinism system 
GraphTalk is a proprietary implementation of Warren s Abstract Machine  with additional object oriented properties 
In some ways     which       Prolog is a subset of Planner  The ideas in Planner were later further developed in the Scientific Community Metaphor 
AgentSpeak is a variant of Prolog for programming agent behavior in multi agent systems 
Erlang began life with a Prolog based implementation and maintains much of Prolog s unification based syntax 
Pilog is a declarative language built on top of PicoLisp  that has the semantics of Prolog  but uses the syntax of Lisp 
 Prolog is an extension of core Prolog that features polymorphic typing  modular programming  and higher order programming  including direct support for terms with variable binding operators through so called   tree syntax and higher order pattern unification 
Notes edit 


      The Prolog terminology differs from that of  logic 
    A term of Prolog is  depending on the context  a term or an atomic formula of logic 
    An atom in a standard logic terminology means an atomic formula   
    an atom of Prolog  depending on the context  is a constant  function
    symbol or predicate symbol of logic 


References edit 


  Clocksin  William F   Mellish  Christopher S          Programming in Prolog  Berlin  New York  Springer Verlag  ISBN                        

  Bratko  Ivan         Prolog programming for artificial intelligence   th      ed    Harlow  England  New York  Addison Wesley  ISBN                        

  Covington  Michael A          Natural language processing for Prolog programmers  Englewood Cliffs  N J   Prentice Hall  ISBN                        

  a b Lloyd  J  W          Foundations of logic programming  Berlin  Springer Verlag  ISBN                        

  See Logic programming        History 

  Stickel  M  E           A prolog technology theorem prover  Implementation by an extended prolog compiler   Journal of Automated Reasoning                  CiteSeerX                      doi         BF          S CID               

  Merritt  Dennis         Building expert systems in Prolog  Berlin  Springer Verlag  ISBN                        

  Felty  Amy   A logic programming approach to implementing higher order term rewriting   Extensions of Logic Programming                 

  Kent D  Lee     January        Foundations of Programming Languages  Springer  pp             ISBN                        

  Ute Schmid     August        Inductive Synthesis of Functional Programs  Universal Planning  Folding of Finite Programs  and Schema Abstraction by Analogical Reasoning  Springer Science  amp  Business Media  ISBN                        

  Fernando C  N  Pereira  Stuart M  Shieber         Prolog and Natural Language Analysis  Microtome 

  a b Adam Lally  Paul Fodor     March         Natural Language Processing With Prolog in the IBM Watson System   Association for Logic Programming  Archived from the original on   September       Retrieved    June       See also Watson  computer  

   Colmerauer  A  and Roussel  P         The birth of Prolog  In History of programming languages   II  pp           

  Kowalski  R  A           The early years of logic programming   PDF   Communications of the ACM          doi                      S CID               

  Colmerauer  A   Roussel  P           The birth of Prolog   PDF   ACM SIGPLAN Notices              doi                       

   Prolog  a brief history   Retrieved    November      

  Pountain  Dick  October         POP and SNAP   Byte  p            Retrieved    October      

   Computer science   Programming Languages  Syntax  Algorithms   Britannica   www britannica com  Retrieved            

  a b Logic programming for the real world  Zoltan Somogyi  Fergus Henderson  Thomas Conway  Richard O Keefe  Proceedings of the ILPS    Postconference Workshop on Visions for the Future of Logic Programming 

   FAQ  Prolog Resource Guide          Monthly posting     Section                 The Prolog      Database   Faqs org 

  a b Moura  Paulo  August         Logtalk   Association of Logic Programming          archived from the original on             retrieved           

  Jan Wielemaker and V tor Santos Costa  Portability of Prolog programs  theory and case studies  CICLOPS WLPE Workshop      Archived            at the Wayback Machine 

  a b Kiselyov  Oleg  Kameyama  Yukiyoshi         Re thinking Prolog  Proc    st meeting of the Japan Society for Software Science and Technology 

  Franzen  Torkel          Declarative vs procedural   Association of Logic Programming       

  Dantsin  Evgeny  Eiter  Thomas  Gottlob  Georg  Voronkov  Andrei          Complexity and Expressive Power of Logic Programming   ACM Computing Surveys                   CiteSeerX                       doi                        S CID             

  terminusdb terminusdb  TerminusDB              retrieved           

  ISO IEC              Prolog        Terms   double quoted list notation  International Organization for Standardization  Geneva 

  Carlsson  Mats     May        SICStus Prolog User s Manual      Core reference documentation  BoD   Books on Demand  ISBN                                via Google Books 

  Covington  Michael A   Bagnara  Roberto  O Keefe  Richard A   Wielemaker  Jan  Price  Simon          Coding guidelines for Prolog   Theory and Practice of Logic Programming                   arXiv            doi         S                  S CID             

  
Kirschenbaum  M   Sterling  L S           Applying Techniques to Skeletons   Patterns for Prolog Programming   Constructing Logic Programs   Ed  J M J  Jacquet   Lecture Notes in Computer Science   Lecture Notes in Artificial Intelligence          CiteSeerX                     

  Sterling  Leon         Computational Logic  Logic Programming and Beyond  Vol             pp              doi                           ISBN                        

  D  Barker Plummer  Cliche programming in Prolog  In M  Bruynooghe  editor  Proc  Second Workshop on Meta Programming in Logic  pages           Dept  of Comp  Sci   Katholieke Univ  Leuven       

  
Gegg harrison  T  S          Representing Logic Program Schemata in Prolog  Procs Twelfth International Conference on Logic Programming  pp               

  
Deville  Yves         Logic programming  systematic program development  Wokingham  England  Addison Wesley  ISBN                        

  a b 
Naish  Lee         Higher order logic programming in Prolog  Report   Department of Computer Science  University of Melbourne  CiteSeerX                     

   With regard to Prolog variables  variables only in the head are implicitly universally quantified  and those only in the body are implicitly existentially quantified   Retrieved            

  a b c ISO IEC        Information technology   Programming languages   Prolog  International Organization for Standardization  Geneva 

  ISO IEC          Modules 

  a b Philipp K rner  Michael Leuschel  Jo o Barbosa  V tor Santos Costa  Ver nica Dahl  Manuel V  Hermenegildo  Jose F  Morales  Jan Wielemaker  Daniel Diaz  Salvador Abreu  Giovanni Ciatto  November         Fifty Years of Prolog and Beyond   Theory and Practice of Logic Programming                   doi         S                  hdl            

  Abreu  Nogueira          Using a Logic Programming Language with Persistence and Contexts   Lecture Notes in Artificia Intelligence      

  Cabeza  Hermenegildo         A new module system for Prolog  Lecture Notes in Computer Science  vol           

  Sagonas  Swift  Warren          XSB as an efficient deductive database engine   SIGMOD

  a b Shapiro  Ehud Y   Sterling  Leon         The Art of Prolog  Advanced Programming Techniques  Cambridge  Massachusetts  MIT Press  ISBN                        

  Ed Dbali  A   Deransart  Pierre  Cervoni  L          Prolog  the standard  reference manual  Berlin  Springer  ISBN                        

   ISO IEC              Cor          ISO 

   ISO IEC              Cor          ISO 

   ISO IEC              Cor          ISO 

   ISO IEC JTC  SC   WG         permanent dead link     

   X J   and the Prolog Standard   Archived from the original on             Retrieved            

  David H  D  Warren   An abstract Prolog instruction set   Technical Note      SRI International  Menlo Park  CA  October      

  Van Roy  P   Despain  A  M           High performance logic programming with the Aquarius Prolog compiler   Computer             doi                   S CID               

  Graf  Peter         Term indexing  Springer  ISBN                        

  Wise  Michael J   Powers  David M  W          Indexing Prolog Clauses via Superimposed Code Words and Field Encoded Words  International Symposium on Logic Programming  pp               

  Colomb  Robert M           Enhancing unification in PROLOG through clause indexing   The Journal of Logic Programming             doi                              

  Swift  T           Tabling for non monotonic programming   Annals of Mathematics and Artificial Intelligence                     doi         A                S CID               

  Zhou  Neng Fa  Sato  Taisuke          Efficient Fixpoint Computation in Linear Tabling   PDF   Proceedings of the  th ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming          

  Swift  T   Warren  D  S           XSB  Extending Prolog with Tabled Logic Programming   Theory and Practice of Logic Programming                     arXiv            doi         S                  S CID              

  Abe  S   Bandoh  T   Yamaguchi  S   Kurosawa  K   Kiriyama  K           High performance integrated Prolog processor IPP   Proceedings of the   th annual international symposium on Computer architecture   ISCA      p            doi                      ISBN                         S CID               

  Robinson  Ian         A Prolog processor based on a pattern matching memory device  Third International Conference on Logic Programming  Lecture Notes in Computer Science  Vol            Springer  pp                doi                           ISBN                        

  Taki  K   Nakajima  K   Nakashima  H   Ikeda  M           Performance and architectural evaluation of the PSI machine   ACM SIGPLAN Notices                doi                     

  Gupta  G   Pontelli  E   Ali  K  A  M   Carlsson  M   Hermenegildo  M  V           Parallel execution of prolog programs  a survey   ACM Transactions on Programming Languages and Systems               doi                        S CID              

   Statically Allocated Systems  

  Bramer  M  A   Bramer  Dawn         The fifth generation  an annotated bibliography  Wokingham  England        Reading  Mass  Addison Wesley  p          ISBN                        

  Feigenbaum  Edward  Shrobe  Howard                The Japanese national Fifth Generation project  Introduction  survey  and evaluation   Future Generation Computer Systems  FGCS Conference                  doi                 X             ISSN              X 

   Software that takes games seriously   New Scientist  Reed Business Information  March           p                  via Google Books      permanent dead link     

  Mycroft  A   O Keefe  R  A           A polymorphic type system for prolog   Artificial Intelligence               doi                              

  Pfenning  Frank         Types in logic programming  Cambridge  Massachusetts  MIT Press  ISBN                        

  Schrijvers  Tom  Santos Costa  Vitor  Wielemaker  Jan  Demoen  Bart          Towards Typed Prolog   In Mar a Garc a de la Banda  Enrico Pontelli  eds    Logic programming    th international conference  ICLP       Udine  Italy  December             proceedings  Lecture Notes in Computer Science  Vol             pp                doi                               ISBN                        

  a b Apt  K  R   Marchiori  E           Reasoning about Prolog programs  From modes through types to assertions   Formal Aspects of Computing     S         CiteSeerX                     doi         BF          S CID               

  O Keefe  Richard A          The craft of Prolog  Cambridge  Massachusetts  MIT Press  ISBN                        

  Covington  Michael  Bagnara  Roberto  et      al           Coding guidelines for Prolog   arXiv            cs PL  

  Roy  P   Demoen  B   Willems  Y  D           Improving the execution speed of compiled Prolog with modes  clause selection  and determinism   Tapsoft      Lecture Notes in Computer Science  Vol            pp            doi         BFb         ISBN                        

  Jaffar  J           Constraint logic programming  a survey   The Journal of Logic Programming                  doi                              

  
Colmerauer  Alain          Opening the Prolog III Universe   Byte  August 

  Wallace  M           Constraint Logic Programming   Computational Logic  Logic Programming and Beyond  Lecture Notes in Computer Science  Vol             pp                doi                           ISBN                        

   XPCE  the SWI Prolog native GUI library   swi prolog org 

   prolog mpi   Apps lumii lv  Retrieved            

  Ehud Shapiro  The family of concurrent logic programming languages ACM Computing Surveys  September      

  Wielemaker  J   Huang  Z   Van Der Meij  L           SWI Prolog and the web   PDF   Theory and Practice of Logic Programming              doi         S                  S CID              

  
Wielemaker  Jan  Hildebrand  Michiel  van Ossenbruggen  Jacco         Heymans  S   Polleres  A   Ruckhaus  E   Pearse  D   Gupta  G   eds     Using  Prolog  as the fundament for applications on the semantic web   PDF   Proceedings of the  nd Workshop on Applications of Logic Programming and to the Web  Semantic Web and Semantic Web Services  CEUR Workshop Proceedings  vol            Porto  Portugal  CEUR WS org  pp            

  Processing OWL  Ontologies using Thea  An Application of Logic Programming  Vangelis Vassiliadis  Jan Wielemaker and Chris Mungall  Proceedings of the  th International Workshop on OWL  Experiences and Directions  OWLED        Chantilly  VA  United States  October            

  Loke  S  W   Davison  A           Secure Prolog based mobile code   Theory and Practice of Logic Programming              arXiv cs          CiteSeerX                      doi         S                  S CID               

  Andersen  C  and Swift  T         The Janus System  a bridge to new prolog applications  In Prolog  The Next    Years  pp           Cham  Springer Nature Switzerland 


Further reading edit 

Blackburn  Patrick  Bos  Johan  Striegnitz  Kristina         Learn Prolog Now   College Publications  ISBN                         Archived from the original on             Retrieved            
Ivan Bratko  Prolog Programming for Artificial Intelligence   th ed         ISBN                         Book supplements and source code     permanent dead link     
William F  Clocksin  Christopher S  Mellish  Programming in Prolog  Using the ISO Standard  Springer   th ed         ISBN                          This edition is updated for ISO Prolog  Prior editions described Edinburgh Prolog  
William F  Clocksin  Clause and Effect  Prolog Programming for the Working Programmer  Springer        ISBN                        
Michael A  Covington  Donald Nute  Andre Vellino  Prolog Programming in Depth        ISBN                  X 
Michael A  Covington  Natural Language Processing for Prolog Programmers        ISBN                       
M  S  Dawe and C M Dawe  Prolog for Computer Sciences  Springer Verlag      
ISO IEC        Information technology   Programming languages   Prolog  International Organization for Standardization  Geneva 
Feliks Klu niak and Stanis aw Szpakowicz  with a contribution by Janusz S  Bie    Prolog for Programmers  Academic Press Inc   London               available under a Creative Commons license at sites google com site prologforprogrammers      permanent dead link        ISBN                    
Richard O Keefe  The Craft of Prolog  ISBN                    
Robert Smith  John Gibson  Aaron Sloman   POPLOG s two level virtual machine support for interactive languages   in Research Directions in Cognitive Science Volume    Artificial Intelligence  Eds D  Sleeman and N  Bernsen  Lawrence Erlbaum Associates  pp               
Leon Sterling and Ehud Shapiro  The Art of Prolog  Advanced Programming Techniques        ISBN                    
David H D Warren  Luis M  Pereira and Fernando Pereira  Prolog   the language and its implementation compared with Lisp  ACM SIGART Bulletin archive  Issue     Proceedings of the      symposium on Artificial intelligence and programming languages  pp         

External links edit 
 Prolog at Wikibooks
vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
 NET
C
C  
C 
COBOL
Erlang
Elixir
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Caml 
OCaml
Pascal
Object Pascal
Perl 
Raku
PHP
Prolog
Python
R
Ruby
Rust
SAS
SQL
Scratch
Shell
Smalltalk
Swift
more   

 Lists  Alphabetical
Categorical
Generational
Non English based
 Category

vteInternational Organization for Standardization  ISO  standardsList of ISO standards   ISO romanizations   IEC standards      
 
 
 
 
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
   
   
   
   
    
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
  
  
  
  
   
   
   
   
   
   
   
   
   
   
   
   
   
    
    
    
      
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
    
      
    
    
    
    
    
    
    
    
         
    
      
    
  
  
  
  
  
  
  
  
   I
  
   
   
   
   
   
   
   
    
         
    
    
    
    
    
    
    
    
    
    
    
    
    
    
         
    
    
      
    
    
    
    
    
    
           
     
     
     
       
     
     
     
     
     
     
     
     
   
   
   
   
    
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
          
     
       TR 
     
     
     
     
     
       
     
     
  
  
     
     
     
       
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
  
  
  
   
   
   
   
   
   
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
  
  
     
     
     
     
     
     
     
  
     
     
     
     
     
      WIP
     
     
     
     
       
     
       
     
       TS 
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
  
  
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
       
       
     
           
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
       
     
       
       
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
      series
     
     
     
     
     
     
     
     
     
       
     
      
     
     
     
     
     
     
     
     
     
     
     
     
     

 Category

Authority control databases NationalUnited StatesFranceBnF dataCzech RepublicIsraelOtherIdRef





Retrieved from  https   en wikipedia org w index php title Prolog amp oldid