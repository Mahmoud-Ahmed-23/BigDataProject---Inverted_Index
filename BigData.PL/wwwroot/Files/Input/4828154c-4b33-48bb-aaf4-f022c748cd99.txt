Ability of a computing system to simulate Turing machines
For the usage of this term in the theory of relative computability by oracle machines  see Turing reduction 

In computability theory  a system of data manipulation rules  such as a model of computation  a computer s instruction set  a programming language  or a cellular automaton  is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine                        devised by English mathematician and computer scientist Alan Turing   This means that this system is able to recognize or decode other data manipulation rule sets  Turing completeness is used as a way to express the power of such a data manipulation rule set  Virtually all programming languages today are Turing complete      a     
A related concept is that of Turing equivalence                   two computers P and Q are called equivalent if P can simulate Q and Q can simulate P             The Church Turing thesis conjectures that any function whose values can be computed by an algorithm can be computed by a Turing machine  and therefore that if any real world computer can simulate a Turing machine  it is Turing equivalent to a Turing machine  A universal Turing machine can be used to simulate any Turing machine and by extension the purely computational aspects of any possible real world computer                       
To show that something is Turing complete  it is enough to demonstrate that it can be used to simulate some Turing complete system  No physical system can have infinite memory  but if the limitation of finite memory is ignored  most programming languages are otherwise Turing complete                       


Non mathematical usage edit 
In colloquial usage  the terms  Turing complete  and  Turing equivalent  are used to mean that any real world general purpose computer or computer language can approximately simulate the computational aspects of any other real world general purpose computer or computer language  In real life  this leads to the practical concepts of computing virtualization and emulation      citation needed     
Real computers constructed so far can be functionally analyzed like a single tape Turing machine  which uses a  tape  for memory   thus the associated mathematics can apply by abstracting their operation far enough  However  real computers have limited physical resources  so they are only linear bounded automaton complete   In contrast  the abstraction of a universal computer is defined as a device with a Turing complete instruction set  infinite memory  and infinite available time      citation needed     

Formal definitions edit 
In computability theory  several closely related terms are used to describe the computational power of a computational system  such as an abstract machine or programming language  

Turing completeness
A computational system that can compute every Turing computable function is called Turing complete  or Turing powerful   Alternatively  such a system is one that can simulate a universal Turing machine 
Turing equivalence
A Turing complete system is called Turing equivalent if every function it can compute is also Turing computable  i e   it computes precisely the same class of functions as do Turing machines  Alternatively  a Turing equivalent system is one that can simulate  and be simulated by  a universal Turing machine   All known physically implementable Turing complete systems are Turing equivalent  which adds support to the Church Turing thesis      citation needed      
 Computational  universality
A system is called universal with respect to a class of systems if it can compute every function computable by systems in that class  or can simulate each of those systems   Typically  the term  universality  is tacitly used with respect to a Turing complete class of systems  The term  weakly universal  is sometimes used to distinguish a system  e g  a cellular automaton  whose universality is achieved only by modifying the standard definition of Turing machine so as to include input streams with infinitely many  s 
History edit 
Turing completeness is significant in that every real world design for a computing device can be simulated by a universal Turing machine  The Church Turing thesis states that this is a law of mathematics                   that a universal Turing machine can  in principle  perform any calculation that any other programmable computer can  This says nothing about the effort needed to write the program  or the time it may take for the machine to perform the calculation  or any abilities the machine may possess that have nothing to do with computation 
Charles Babbage s analytical engine      s  would have been the first Turing complete machine if it had been built at the time it was designed  Babbage appreciated that the machine was capable of great feats of calculation  including primitive logical reasoning  but he did not appreciate that no other machine could do better      citation needed      From the     s until the     s  mechanical calculating machines such as adders and multipliers were built and improved  but they could not perform a conditional branch and therefore were not Turing complete 
In the late   th century  Leopold Kronecker formulated notions of computability  defining primitive recursive functions  These functions can be calculated by rote computation  but they are not enough to make a universal computer  because the instructions that compute them do not allow for an infinite loop  In the early   th century  David Hilbert led a program to axiomatize all of mathematics with precise axioms and precise logical rules of deduction that could be performed by a machine  Soon it became clear that a small set of deduction rules are enough to produce the consequences of any set of axioms  These rules were proved by Kurt G del in      to be enough to produce every theorem 
The actual notion of computation was isolated soon after  starting with G del s incompleteness theorem  This theorem showed that axiom systems were limited when reasoning about the computation that deduces their theorems  Church and Turing independently demonstrated that Hilbert s Entscheidungsproblem  decision problem  was unsolvable             thus identifying the computational core of the incompleteness theorem  This work  along with G del s work on general recursive functions  established that there are sets of simple instructions  which  when put together  are able to produce any computation  The work of G del showed that the notion of computation is essentially unique 
In      Konrad Zuse completed the Z  computer  Zuse was not familiar with Turing s work on computability at the time  In particular  the Z  lacked dedicated facilities for a conditional jump  thereby precluding it from being Turing complete  However  in       it was shown by Rojas that the Z  is capable of simulating conditional jumps  and therefore Turing complete in theory  To do this  its tape program would have to be long enough to execute every possible path through both sides of every branch             
The first computer capable of conditional branching in practice  and therefore Turing complete in practice  was the ENIAC in       Zuse s Z  computer was operational in       but it did not support conditional branching until                  

Computability theory edit 
Computability theory uses models of computation to analyze problems and determine whether they are computable and under what circumstances  The first result of computability theory is that there exist problems for which it is impossible to predict what a  Turing complete  system will do over an arbitrarily long time 
The classic example is the halting problem  create an algorithm that takes as input a program in some Turing complete language and some data to be fed to that program  and determines whether the program  operating on the input  will eventually stop or will continue forever  It is trivial to create an algorithm that can do this for some inputs  but impossible to do this in general  For any characteristic of the program s eventual output  it is impossible to determine whether this characteristic will hold 
This impossibility poses problems when analyzing real world computer programs  For example  one cannot write a tool that entirely protects programmers from writing infinite loops or protects users from supplying input that would cause infinite loops 
One can instead limit a program to executing only for a fixed period of time  timeout  or limit the power of flow control instructions  for example  providing only loops that iterate over the items of an existing array   However  another theorem shows that there are problems solvable by Turing complete languages that cannot be solved by any language with only finite looping abilities  i e   languages that guarantee that every program will eventually finish to a halt   So any such language is not Turing complete  For example  a language in which programs are guaranteed to complete and halt cannot compute the computable function produced by Cantor s diagonal argument on all computable functions in that language 

Turing oracles edit 
Main article  Oracle machine
A computer with access to an infinite tape of data may be more powerful than a Turing machine  for instance  the tape might contain the solution to the halting problem or some other Turing undecidable problem  Such an infinite tape of data is called a Turing oracle  Even a Turing oracle with random data is not computable  with probability     since there are only countably many computations but uncountably many oracles  So a computer with a random Turing oracle can compute things that a Turing machine cannot 

Digital physics edit 
See also  Church Turing thesis        Philosophical implications
All known laws of physics have consequences that are computable by a series of approximations on a digital computer  A hypothesis called digital physics states that this is no accident because the universe itself is computable on a universal Turing machine  This would imply that no computer more powerful than a universal Turing machine can be built physically             

Examples edit 
The computational systems  algebras  calculi  that are discussed as Turing complete systems are those intended for studying theoretical computer science  They are intended to be as simple as possible  so that it would be easier to understand the limits of computation  Here are a few 

Automata theory
Formal grammar  language generators 
Formal language  language recognizers 
Lambda calculus
Post Turing machines
Process calculus
Most programming languages  their abstract models  maybe with some particular constructs that assume finite memory omitted   conventional and unconventional  are Turing complete  This includes 

All general purpose languages in wide use 
Procedural programming languages such as C  Pascal 
Object oriented languages such as Java  Smalltalk or C  
Multi paradigm languages such as Ada  C    Common Lisp  Fortran  JavaScript  Object Pascal  Perl  Python  R 
Most languages using less common paradigms 
Functional languages such as Lisp and Haskell 
Logic programming languages such as Prolog 
General purpose macro processor such as m  
Declarative languages such as SQL and XSLT                         
VHDL and other hardware description languages 
TeX  a typesetting system 
Esoteric programming languages  a form of mathematical recreation in which programmers work out how to achieve basic programming constructs in an extremely difficult but mathematically Turing equivalent language 
Some rewrite systems are Turing complete 
Turing completeness is an abstract statement of ability  rather than a prescription of specific language features used to implement that ability  The features used to achieve Turing completeness can be quite different  Fortran systems would use loop constructs or possibly even goto statements to achieve repetition  Haskell and Prolog  lacking looping almost entirely  would use recursion  Most programming languages are describing computations on von Neumann architectures  which have memory  RAM and register  and a control unit  These two elements make this architecture Turing complete  Even pure functional languages are Turing complete                         
Turing completeness in declarative SQL is implemented through recursive common table expressions  Unsurprisingly  procedural extensions to SQL  PLSQL  etc   are also Turing complete  This illustrates one reason why relatively powerful non Turing complete languages are rare  the more powerful the language is initially  the more complex are the tasks to which it is applied and the sooner its lack of completeness becomes perceived as a drawback  encouraging its extension until it is Turing complete 
The untyped lambda calculus is Turing complete  but many typed lambda calculi  including System F  are not  The value of typed systems is based in their ability to represent most typical computer programs while detecting more errors 
Rule     and Conway s Game of Life  both cellular automata  are Turing complete 

Unintentional Turing completeness edit 
Some software and video games are Turing complete by accident  i e  not by design 
Software 

Microsoft Excel            
Games 

Dwarf Fortress            
Cities  Skylines            
Opus Magnum            
Minecraft            
Magic  The Gathering                        
Infinite grid Minesweeper            
Social media 

Habbo Hotel            
Computational languages 

C   templates            
printf format string            
TypeScript s type system            
x   assembly s MOV instruction                                    
Biology 

Chemical reaction networks                                                 and enzyme based DNA computers             have been shown to be Turing equivalent
Non Turing complete languages edit 
Many computational languages exist that are not Turing complete  One such example is the set of regular languages  which are generated by regular expressions and which are recognized by finite automata  A more powerful but still not Turing complete extension of finite automata is the category of pushdown automata and context free grammars  which are commonly used to generate parse trees in an initial stage of program compiling  Further examples include some of the early versions of the pixel shader languages embedded in Direct D and OpenGL extensions      citation needed     
In total functional programming languages  such as Charity and Epigram  all functions are total and must terminate  Charity uses a type system and control constructs based on category theory  whereas Epigram uses dependent types  The LOOP language is designed so that it computes only the functions that are primitive recursive  All of these compute proper subsets of the total computable functions  since the full set of total computable functions is not computably enumerable  Also  since all functions in these languages are total  algorithms for recursively enumerable sets cannot be written in these languages  in contrast with Turing machines 
Although  untyped  lambda calculus is Turing complete  simply typed lambda calculus is not 

See also edit 

AI completeness
Algorithmic information theory
Chomsky hierarchy
Church Turing thesis
Computability theory
Inner loop
Loop  computing 
Machine that always halts
Rice s theorem
smn theorem
Structured program theorem
Turing tarpit
Virtualization
Emulation  computing 

Footnotes edit 


  Arguably 
T uring  C omplete  computation is the only paradigm for the theory underpinning Computer Science   It has been argued that  at present  the dominant Computer Science paradigm may be
characterised theoretically as TC computation  overarching programming languages 
and practically as Computational Thinking  overarching programming methodologies            


References edit 


  Tom Stuart         Understanding Computation  From Simple Machines to Impossible Programs  O Reilly Media  Inc  p            ISBN                         Extract of page    

  Cristian S Calude         To Halt Or Not To Halt  That Is The Question  World Scientific  p           ISBN                         Extract of page   

  Michaelson  Greg     February         Programming Paradigms  Turing Completeness and Computational Thinking   The Art  Science  and Engineering of Programming         arXiv             doi          programming journal org          

  G kt rk   oluk  Sinan Kalkan         Introduction to Programming Concepts with Case Studies in Python  illustrated      ed    Springer Science  amp  Business Media  p           ISBN                         Extract of page   

  Ben Goertzel         The Structure of Intelligence  A New Mathematical Model of Mind  illustrated      ed    Springer Science  amp  Business Media  p           ISBN                         Extract of page   

  Alan Garnham         Artificial Intelligence  An Introduction  Routledge  p            ISBN                         Extract of page    

  Torben  gidius Mogensen         Programming Language Design and Implementation  Springer Nature  p          ISBN                         Extract of page  

  John R  Woodward          Modularity in Genetic Programming   In Conor Ryan  ed    Genetic Programming   th European Conference  EuroGP       Essex  UK  April              Proceedings  Volume    illustrated      ed    Springer Science  amp  Business Media  p            doi                           ISBN                         Extract of page    

  Hodges  Andrew                Alan Turing  The Enigma  London  Burnett Books  p            ISBN                   

  Rojas  Raul          How to make Zuse s Z  a universal computer   Annals of the History of Computing                 doi                   

  Rojas  Ra l    February         Konrad Zuse und der bedingte Sprung       Konrad Zuse and the conditional jump       Informatik Spektrum  in German                  doi         s                  ISSN                 S CID              

  Schmidhuber  J rgen         Freksa  Christian  Jantzen  Matthias  Valk  R diger  eds     A computer scientist s view of life  the universe  and everything   Foundations of Computer Science  Potential   Theory   Cognition  Lecture Notes in Computer Science  vol             Berlin  Heidelberg  Springer  pp                arXiv quant ph          doi         bfb         ISBN                         S CID                retrieved    May     

  Dfetter  Breinbaas    August         Cyclic Tag System   PostgreSQL wiki  Retrieved    September      

  Lyons  Bob     March         Universal Turing Machine in XSLT   B B Integration Solutions from Unidex  Archived from the original on    July       Retrieved   July      

  Boyer  Robert S   Moore  J  Strother  May        A Mechanical Proof of the Turing Completeness of Pure Lisp  PDF   Technical report   Institute for Computing Science  University of Texas at Austin      Archived  PDF  from the original on    September      

  Rauber  Thomas  R nger  Gudula         Parallel programming  for multicore and cluster systems   nd      ed    Springer  ISBN                    

   Announcing LAMBDA  Turn Excel formulas into custom functions   TECHCOMMUNITY MICROSOFT COM    December       Retrieved   December      

  Cedotal  Andrew     April         Man Uses World s Most Difficult Computer Game to Create   A Working Turing Machine   The Mary Sue  Archived from the original on    June       Retrieved   June      

  Plunkett  Luke     July         Cities  Skylines Map Becomes A Poop Powered Computer   Kotaku  Retrieved    July      

  Caldwell  Brendan     November         Opus Magnum player makes an alchemical computer   Rock Paper Shotgun  Retrieved    September      

  Crider  Michael   This   bit processor built in Minecraft can run its own games   PCWorld  Retrieved    July      

  Churchill  Alex  Biderman  Stella  Herrick  Austin         Magic  The Gathering Is Turing Complete  PDF     th International Conference on Fun with Algorithms 

  Ouellette  Jennifer     June         It s possible to build a Turing machine within Magic  The Gathering   Ars Technica  Retrieved    March      

  Kaye  Richard     May         Infinite versions of minesweeper are Turing complete   PDF   Archived from the original  PDF  on   August       Retrieved   July      

   Habbo s Twitter thread on the implementation of a Turing machine inside the game     November       Retrieved    November      

  Meyers  Scott  Scott Douglas          Effective C             specific ways to improve your programs and designs   rd      ed    Upper Saddle River  NJ  Addison Wesley  ISBN                  OCLC               

  A   th IOCCC WinnerCarlini  Nicolas  Barresi  Antonio  Payer  Mathias  Wagner  David  Gross  Thomas R   August         Control flow bending  on the effectiveness of control flow integrity   Proceedings of the   th USENIX Conference on Security Symposium  pp                ISBN                    

  Dabler  Ryan     September         TypeScript and Turing Completeness   ITNEXT  LINKIT  Retrieved    November      

  Dolan  Stephen   mov is Turing complete   PDF   stedolan net  Archived from the original  PDF  on    February       Retrieved   May      

  Williams  Al     March         One Instruction To Rule Them All  C Compiler Emits Only MOV   Hackaday  Retrieved    October      

  Break Me   The MoVfuscator Turning mov into a soul crushing RE nightmare Christopher Domas     September       retrieved   November     

  Shah  Shalin  Wee  Jasmine  Song  Tianqi  Ceze  Luis  Strauss  Karin  Chen  Yuan Jyue  Reif  John    May         Using Strand Displacing Polymerase To Program Chemical Reaction Networks   Journal of the American Chemical Society                       doi         jacs  c       ISSN                 PMID                S CID                

  Chen  Yuan Jyue  Dalchau  Neil  Srinivas  Niranjan  Phillips  Andrew  Cardelli  Luca  Soloveichik  David  Seelig  Georg  October         Programmable chemical controllers made from DNA   Nature Nanotechnology                   Bibcode     NatNa         C  doi         nnano           ISSN                 PMC               PMID               

  Srinivas  Niranjan  Parkin  James  Seelig  Georg  Winfree  Erik  Soloveichik  David     December         Enzyme free nucleic acid dynamical systems   Science              eaal      doi         science aal      ISSN                 PMID               

  Soloveichik  David  Seelig  Georg  Winfree  Erik     March         DNA as a universal substrate for chemical kinetics   Proceedings of the National Academy of Sciences                       Bibcode     PNAS          S  doi         pnas             ISSN                 PMC               PMID               

  Shapiro  Ehud    December         A Mechanical Turing Machine  Blueprint for a Biomolecular Computer   Interface Focus         Weizmann Institute of Science           doi         rsfs            PMC               PMID                Archived from the original on   January       Retrieved    August      


Further reading edit 

Brainerd  W  S   Landweber  L  H          Theory of Computation  Wiley  ISBN                    
Giles  Jim     October         Simplest  universal computer  wins student           New Scientist 
Herken  Rolf  ed          The Universal Turing Machine  A Half Century Survey  Springer Verlag  ISBN                    
Turing  A  M           On Computable Numbers  with an Application to the Entscheidungsproblem   Proceedings of the London Mathematical Society                  doi         plms s            S CID            
Turing  A  M           On Computable Numbers  with an Application to the Entscheidungsproblem  A correction   Proceedings of the London Mathematical Society                  doi         plms s           

External links edit 
 Turing Complete   wiki c  com 
vteAlan Turing
Turing completeness
Turing degree
Turing machine
Turing pattern
Turing s proof
Turing reduction
Turing test
Publications
 On Computable Numbers        
 Systems of Logic Based on Ordinals        
 Intelligent Machinery        
 Computing Machinery and Intelligence        
 The Chemical Basis of Morphogenesis        
Related
Legacy of Alan Turing
namesakes






Retrieved from  https   en wikipedia org w index php title Turing completeness amp oldid