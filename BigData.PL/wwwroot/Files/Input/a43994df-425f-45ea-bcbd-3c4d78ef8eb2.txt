Inference rule treating non provability as falsity
Negation as failure  NAF  for short  is a non monotonic inference rule in logic programming  used to derive 
  
    
      
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle  mathrm  not   p 
  
  i e  that 
  
    
      
        p
      
    
      displaystyle p 
  
 is assumed not to hold  from failure to derive 
  
    
      
        p
      
    
      displaystyle p 
  
   Note that 
  
    
      
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle  mathrm  not   p 
  
 can be different from the statement 
  
    
      
          xac 
        p
      
    
      displaystyle  neg p 
  
 of the logical negation of 
  
    
      
        p
      
    
      displaystyle p 
  
  depending on the completeness of the inference algorithm and thus also on the formal logic system 
Negation as failure has been an important feature of logic programming since the earliest days of both Planner and Prolog  In Prolog  it is usually implemented using Prolog s extralogical constructs 
More generally  this kind of negation is known as weak negation                        in contrast with the strong  i e  explicit  provable  negation 


Planner semantics edit 
In Planner  negation as failure could be implemented as follows 

if  not  goal p     then  assert  p 
which says that if an exhaustive search to prove p fails  then assert  p              This states that proposition p shall be assumed as  not true  in any subsequent processing  However  Planner not being based on a logical model  a logical interpretation of the preceding remains obscure 

Prolog semantics edit 
In pure Prolog  NAF literals of the form 
  
    
      
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle  mathrm  not   p 
  
 can occur in the body of clauses and can be used to derive other NAF literals  For example  given only the four clauses


  
    
      
        p
          x     
        q
          x     
        
          n
          o
          t
        
          xa  
        r
      
    
      displaystyle p leftarrow q land  mathrm  not   r 
  


  
    
      
        q
          x     
        s
      
    
      displaystyle q leftarrow s 
  


  
    
      
        q
          x     
        t
      
    
      displaystyle q leftarrow t 
  


  
    
      
        t
          x     
      
    
      displaystyle t leftarrow  
  

NAF derives 
  
    
      
        
          n
          o
          t
        
          xa  
        s
      
    
      displaystyle  mathrm  not   s 
  
  
  
    
      
        
          n
          o
          t
        
          xa  
        r
      
    
      displaystyle  mathrm  not   r 
  
 and 
  
    
      
        p
      
    
      displaystyle p 
  
 as well as 
  
    
      
        t
      
    
      displaystyle t 
  
 and 
  
    
      
        q
      
    
      displaystyle q 
  
 

Completion semantics edit 
The semantics of NAF remained an open issue until       when Keith Clark showed that it is correct with respect to the completion of the logic program  where  loosely speaking   only  and 
  
    
      
          x     
      
    
      displaystyle  leftarrow  
  
 are interpreted as  if and only if   written as  iff  or  
  
    
      
          x     
      
    
      displaystyle  equiv  
  
  
For example  the completion of the four clauses above is


  
    
      
        p
          x     
        q
          x     
        
          n
          o
          t
        
          xa  
        r
      
    
      displaystyle p equiv q land  mathrm  not   r 
  


  
    
      
        q
          x     
        s
          x     
        t
      
    
      displaystyle q equiv s lor t 
  


  
    
      
        t
          x     
        
          t
          r
          u
          e
        
      
    
      displaystyle t equiv  mathrm  true   
  


  
    
      
        r
          x     
        
          f
          a
          l
          s
          e
        
      
    
      displaystyle r equiv  mathrm  false   
  


  
    
      
        s
          x     
        
          f
          a
          l
          s
          e
        
      
    
      displaystyle s equiv  mathrm  false   
  

The NAF inference rule simulates reasoning explicitly with the completion  where both sides of the equivalence are negated and negation on the right hand side is distributed down to atomic formulae  For example  to show 
  
    
      
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle  mathrm  not   p 
  
  NAF simulates reasoning with the equivalences


  
    
      
        
          n
          o
          t
        
          xa  
        p
          x     
        
          n
          o
          t
        
          xa  
        q
          x     
        r
      
    
      displaystyle  mathrm  not   p equiv  mathrm  not   q lor r 
  


  
    
      
        
          n
          o
          t
        
          xa  
        q
          x     
        
          n
          o
          t
        
          xa  
        s
          x     
        
          n
          o
          t
        
          xa  
        t
      
    
      displaystyle  mathrm  not   q equiv  mathrm  not   s land  mathrm  not   t 
  


  
    
      
        
          n
          o
          t
        
          xa  
        t
          x     
        
          f
          a
          l
          s
          e
        
      
    
      displaystyle  mathrm  not   t equiv  mathrm  false   
  


  
    
      
        
          n
          o
          t
        
          xa  
        r
          x     
        
          t
          r
          u
          e
        
      
    
      displaystyle  mathrm  not   r equiv  mathrm  true   
  


  
    
      
        
          n
          o
          t
        
          xa  
        s
          x     
        
          t
          r
          u
          e
        
      
    
      displaystyle  mathrm  not   s equiv  mathrm  true   
  

In the non propositional case  the completion needs to be augmented with equality axioms  to formalize the assumption that individuals with distinct names are distinct  NAF simulates this by failure of unification  For example  given only the two clauses


  
    
      
        p
         
        a
         
          x     
      
    
      displaystyle p a  leftarrow  
  


  
    
      
        p
         
        b
         
          x     
        t
      
    
      displaystyle p b  leftarrow t 
  

NAF derives 
  
    
      
        
          n
          o
          t
        
          xa  
        p
         
        c
         
      
    
      displaystyle  mathrm  not   p c  
  
 
The completion of the program is


  
    
      
        p
         
        X
         
          x     
        X
         
        a
          x     
        X
         
        b
      
    
      displaystyle p X  equiv X a lor X b 
  

augmented with unique names axioms and domain closure axioms 
The completion semantics is closely related both to circumscription and to the closed world assumption 

Autoepistemic semantics edit 
The completion semantics justifies interpreting the result 
  
    
      
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle  mathrm  not   p 
  
 of a NAF inference as the classical negation 
  
    
      
          xac 
        p
      
    
      displaystyle  neg p 
  
 of 
  
    
      
        p
      
    
      displaystyle p 
  
  However  in       Michael Gelfond showed that it is also possible to interpret 
  
    
      
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle  mathrm  not   p 
  
 literally as  
  
    
      
        p
      
    
      displaystyle p 
  
 can not be shown    
  
    
      
        p
      
    
      displaystyle p 
  
 is not known  or  
  
    
      
        p
      
    
      displaystyle p 
  
 is not believed   as in autoepistemic logic  The autoepistemic interpretation was developed further by Gelfond and Lifschitz in       and is the basis of answer set programming 
The autoepistemic semantics of a pure Prolog program P with NAF literals is obtained by  expanding  P with a set of ground  variable free  NAF literals   that is stable in the sense that

     not p   p is not implied by P       
In other words  a set of assumptions   about what can not be shown is stable if and only if   is the set of all sentences that truly can not be shown from the program P expanded by    Here  because of the simple syntax of pure Prolog programs   implied by  can be understood very simply as derivability using modus ponens and universal instantiation alone 
A program can have zero  one or more stable expansions  For example 


  
    
      
        p
          x     
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle p leftarrow  mathrm  not   p 
  

has no stable expansions 


  
    
      
        p
          x     
        
          n
          o
          t
        
          xa  
        q
      
    
      displaystyle p leftarrow  mathrm  not   q 
  

has exactly one stable expansion       not q  


  
    
      
        p
          x     
        
          n
          o
          t
        
          xa  
        q
      
    
      displaystyle p leftarrow  mathrm  not   q 
  


  
    
      
        q
          x     
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle q leftarrow  mathrm  not   p 
  

has exactly two stable expansions        not p  and       not q  
The autoepistemic interpretation of NAF can be combined with classical negation  as in extended logic programming and answer set programming  Combining the two negations  it is possible to express  for example


  
    
      
          xac 
        p
          x     
        
          n
          o
          t
        
          xa  
        p
      
    
      displaystyle  neg p leftarrow  mathrm  not   p 
  
		 the closed world assumption  and

  
    
      
        p
          x     
        
          n
          o
          t
        
          xa  
          xac 
        p
      
    
      displaystyle p leftarrow  mathrm  not    neg p 
  
	 
  
    
      
        p
      
    
      displaystyle p 
  
 holds by default  
Footnotes edit 


  B lkov   M   Colacito  A           Proof Theory for Positive Logic with Weak Negation   Studia Logica                    arXiv             doi         s                y  S CID                

  Wagner  G           Web Rules Need Two Kinds of Negation   PDF   In Bry  F   Henze  N   Maluszynski  J   eds    Principles and Practice of Semantic Web Reasoning  PPSW        Lecture Notes in Computer Science  Vol             Lecture Notes in Computer Science  Springer  pp              doi                              ISBN                        

  Clark  Keith          Negation as a failure   PDF   Logic and Data Bases  Springer Verlag  pp                doi                               ISBN                        


References edit 

Clark  K                  Negation as failure   In Ginsberg  M L   ed    Readings in nonmonotonic reasoning  Morgan Kaufmann  pp                ISBN                        
Gelfond  M           On Stratified Autoepistemic Theories   PDF   AAAI     Proceedings of the sixth National conference on Artificial intelligence  AAAI Press  pp                ISBN                        
Gelfond  M   Lifschitz  V           The Stable Model Semantics for Logic Programming   In Kowalski  R   Bowen  K   eds    Proc   th International Conference and Symposium on Logic Programming  MIT Press  pp                CiteSeerX                      ISBN                        
Shepherdson  J C           Negation as Failure  A Comparison of Clark s Completed Data Dase and Reiter s Closed World Assumption   Journal of Logic Programming            doi                              
Shepherdson  J C           Negation as Failure II   Journal of Logic Programming                  doi                              

External links edit 
Report from the W C Workshop on Rule Languages for Interoperability  Includes notes on NAF and SNAF  scoped negation as failure  





Retrieved from  https   en wikipedia org w index php title Negation as failure amp oldid