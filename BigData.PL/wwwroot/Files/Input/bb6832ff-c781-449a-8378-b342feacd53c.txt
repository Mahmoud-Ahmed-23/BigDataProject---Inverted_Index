Problem solving technique and algorithmic paradigm
This article is about the problem solving technique in computer science  For similarly named methods in other disciplines  see Brute force  disambiguation  
This article needs additional citations for verification  Please help improve this article by adding citations to reliable sources  Unsourced material may be challenged and removed Find sources        Brute force search              news        newspapers        books        scholar        JSTOR   February        Learn how and when to remove this message 
In computer science  brute force search or exhaustive search  also known as generate and test  is a very general problem solving technique and algorithmic paradigm that consists of systematically checking all possible candidates for whether or not each candidate satisfies the problem s statement 
A brute force algorithm that finds the divisors of a natural number n would enumerate all integers from   to n  and check whether each of them divides n without remainder  A brute force approach for the eight queens puzzle would examine all possible arrangements of   pieces on the    square chessboard and for each arrangement  check whether each  queen  piece can attack any other            



When in doubt  use brute force 


Ken Thompson      attributed

While a brute force search is simple to implement and will always find a solution if it exists  implementation costs are proportional to the number of candidate solutions                  which in many practical problems tends to grow very quickly as the size of the problem increases   Combinatorial explosion              Therefore  brute force search is typically used when the problem size is limited  or when there are problem specific heuristics that can be used to reduce the set of candidate solutions to a manageable size  The method is also used when the simplicity of implementation is more important than processing speed 
This is the case  for example  in critical applications where any errors in the algorithm would have very serious consequences or when using a computer to prove a mathematical theorem  Brute force search is also useful as a baseline method when benchmarking other algorithms or metaheuristics  Indeed  brute force search can be viewed as the simplest metaheuristic  Brute force search should not be confused with backtracking  where large sets of solutions can be discarded without being explicitly enumerated  as in the textbook computer solution to the eight queens problem above   The brute force method for finding an item in a table                  namely  check all entries of the latter  sequentially                  is called linear search 


Implementing the brute force search edit 
Basic algorithm edit 
In order candidate for P after the current one c 

valid  P  c   check whether candidate c is a solution for P 
output  P  c   use the solution c of P as appropriate to the application 
The next procedure must also tell when there are no more candidates for the instance P  after the current one c  A convenient way to do that is to return a  null candidate   some conventional data value   that is distinct from any real candidate  Likewise the first procedure should return   if there are no candidates at all for the instance P  The brute force method is then expressed by the algorithm 

c   first P 
while c     do
    if valid P c  then
        output P  c 
    c   next P  c 
end while

For example  when looking for the divisors of an integer n  the instance data P is the number n  The call first n  should return the integer   if n      or   otherwise  the call next n c  should return c     if c  lt  n  and   otherwise  and valid n c  should return true if and only if c is a divisor of n   In fact  if we choose   to be n      the tests n     and c  lt  n are unnecessary  The brute force search algorithm above will call output for every candidate that is a solution to the given instance P  The algorithm is easily modified to stop after finding the first solution  or a specified number of solutions  or after testing a specified number of candidates  or after spending a given amount of CPU time 

Combinatorial explosion edit 
The main disadvantage of the brute force method is that  for many real world problems  the number of natural candidates is prohibitively large  For instance  if we look for the divisors of a number as described above  the number of candidates tested will be the given number n  So if n has sixteen decimal digits  say  the search will require executing at least      computer instructions  which will take several days on a typical PC  If n is a random    bit natural number  which has about    decimal digits on the average  the search will take about    years  This steep growth in the number of candidates  as the size of the data increases  occurs in all sorts of problems  For instance  if we are seeking a particular rearrangement of    letters  then we have                 candidates to consider  which a typical PC can generate and test in less than one second  However  adding one more letter                  which is only a     increase in the data size                  will multiply the number of candidates by     a       increase  For    letters  the number of candidates is      which is about          or     quintillion  and the search will take about    years  This unwelcome phenomenon is commonly called the combinatorial explosion  or the curse of dimensionality 
One example of a case where combinatorial complexity leads to solvability limit is in solving chess  Chess is not a solved game  In       all chess game endings with six pieces or less were solved  showing the result of each position if played perfectly  It took ten more years to complete the tablebase with one more chess piece added  thus completing a   piece tablebase  Adding one more piece to a chess ending  thus making an   piece tablebase  is considered intractable due to the added combinatorial complexity                       

Speeding up brute force searches edit 
One way to speed up a brute force algorithm is to reduce the search space  that is  the set of candidate solutions  by using heuristics specific to the problem class  For example  in the eight queens problem the challenge is to place eight queens on a standard chessboard so that no queen attacks any other  Since each queen can be placed in any of the    squares  in principle there are                           possibilities to consider  However  because the queens are all alike  and that no two queens can be placed on the same square  the candidates are all possible ways of choosing of a set of   squares from the set all    squares  which means    choose                                  candidate solutions                  about          of the previous estimate  Further  no arrangement with two queens on the same row or the same column can be a solution  Therefore  we can further restrict the set of candidates to those arrangements 
As this example shows  a little bit of analysis will often lead to dramatic reductions in the number of candidate solutions  and may turn an intractable problem into a trivial one 
In some cases  the analysis may reduce the candidates to the set of all valid solutions  that is  it may yield an algorithm that directly enumerates all the desired solutions  or finds one solution  as appropriate   without wasting time with tests and the generation of invalid candidates  For example  for the problem  find all integers between   and           that are evenly divisible by      a naive brute force solution would generate all integers in the range  testing each of them for divisibility  However  that problem can be solved much more efficiently by starting with     and repeatedly adding     until the number exceeds                            which takes only                          steps  and no tests 

Reordering the search space edit 
In applications that require only one solution  rather than all solutions  the expected running time of a brute force search will often depend on the order in which the candidates are tested  As a general rule  one should test the most promising candidates first  For example  when searching for a proper divisor of a random number n  it is better to enumerate the candidate divisors in increasing order  from   to n      than the other way around                  because the probability that n is divisible by c is   c  Moreover  the probability of a candidate being valid is often affected by the previous failed trials  For example  consider the problem of finding a   bit in a given      bit string P  In this case  the candidate solutions are the indices   to       and a candidate c is valid if P c       Now  suppose that the first bit of P is equally likely to be   or    but each bit thereafter is equal to the previous one with     probability  If the candidates are enumerated in increasing order    to       the number t of candidates examined before success will be about    on the average  On the other hand  if the candidates are enumerated in the order                             etc   the expected value of t will be only a little more than   More generally  the search space should be enumerated in such a way that the next candidate is most likely to be valid  given that the previous trials were not  So if the valid solutions are likely to be  clustered  in some sense  then each new candidate should be as far as possible from the previous ones  in that same sense  The converse holds  of course  if the solutions are likely to be spread out more uniformly than expected by chance 

Alternatives to brute force search edit 
There are many other search methods  or metaheuristics  which are designed to take advantage of various kinds of partial knowledge one may have about the solution  Heuristics can also be used to make an early cutoff of parts of the search  One example of this is the minimax principle for searching game trees  that eliminates many subtrees at an early stage in the search  In certain fields  such as language parsing  techniques such as chart parsing can exploit constraints in the problem to reduce an exponential complexity problem into a polynomial complexity problem  In many cases  such as in Constraint Satisfaction Problems  one can dramatically reduce the search space by means of Constraint propagation  that is efficiently implemented in Constraint programming languages  The search space for problems can also be reduced by replacing the full problem with a simplified version  For example  in computer chess  rather than computing the full minimax tree of all possible moves for the remainder of the game  a more limited tree of minimax possibilities is computed  with the tree being pruned at a certain number of moves  and the remainder of the tree being approximated by a static evaluation function 

In cryptography edit 
Main article  Brute force attack
In cryptography  a brute force attack involves systematically checking all possible keys until the correct key is found             This strategy can in theory be used against any encrypted data             except a one time pad  by an attacker who is unable to take advantage of any weakness in an encryption system that would otherwise make his or her task easier 
The key length used in the encryption determines the practical feasibility of performing a brute force attack  with longer keys exponentially more difficult to crack than shorter ones  Brute force attacks can be made less effective by obfuscating the data to be encoded  something that makes it more difficult for an attacker to recognise when he has cracked the code  One of the measures of the strength of an encryption system is how long it would theoretically take an attacker to mount a successful brute force attack against it 

References edit 


   Brute Force Algorithms Explained   freeCodeCamp org              Retrieved            

   Complexity of brute force search   coursera  Retrieved    June      

   Is there a freely available online   piece Endgame tablebase    Stack Exchange 

   Lomonosov Endgame Tablebases   ChessOK  Archived from the original on April         

  Mark Burnett   Blocking Brute Force Attacks  Archived            at the Wayback Machine  UVA Computer Science      

  Christof Paar  Jan Pelzl  Bart Preneel         Understanding Cryptography  A Textbook for Students and Practitioners  Springer  p          ISBN                        


See also edit 
A brute force algorithm to solve Sudoku puzzles 
Brute force attack
Big O notation
Iteration Computing
vteData structures and algorithmsData structures
Array
Associative array
Binary search tree
Fenwick tree
Graph
Hash table
Heap
Linked list
Queue
Segment tree
Stack
String
Tree
Trie
Algorithms and algorithmic paradigms
Backtracking
Binary search
Breadth first search
Brute force search
Depth first search
Divide and conquer
Dynamic programming
Graph traversal
Fold
Greedy
Hash function
Minimax
Online
Randomized
Recursion
Root finding
Sorting
Streaming
Sweep line
String searching
Topological sorting

List of data structures
List of algorithms






Retrieved from  https   en wikipedia org w index php title Brute force search amp oldid